{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotrader/src/lib/safetyFeatures.ts"],"sourcesContent":["'use client';\n\n// Safety features for the SolBotX trading bot\nexport interface Position {\n  id: string;\n  pair: string;\n  entryPrice: number;\n  amount: number;\n  timestamp: string;\n  action: 'buy' | 'sell';\n}\n\nexport interface StopLossConfig {\n  enabled: boolean;\n  percentage: number; // Percentage drop/rise that triggers stop loss\n}\n\nexport interface TakeProfitConfig {\n    enabled: boolean;\n    percentage: number; // Percentage rise/drop that triggers take profit\n}\n\n// Default stop loss configuration\nexport const DEFAULT_STOP_LOSS_CONFIG: StopLossConfig = {\n  enabled: true, // Defaulting to true based on previous code, consider making it false\n  percentage: 2.5\n};\n\n// Default take profit configuration\nexport const DEFAULT_TAKE_PROFIT_CONFIG: TakeProfitConfig = {\n    enabled: true, // Defaulting to true, consider making it false\n    percentage: 5.0\n};\n\n\n// Check if stop loss should be triggered\nexport const checkStopLoss = (\n  position: Position,\n  currentPrice: number,\n  stopLossConfig: StopLossConfig // Require config to be passed\n): boolean => {\n  if (!stopLossConfig.enabled || !currentPrice) {\n    return false;\n  }\n\n  // For long positions (buy), trigger stop loss if price drops below threshold\n  if (position.action === 'buy') {\n    const stopLossThreshold = position.entryPrice * (1 - stopLossConfig.percentage / 100);\n    return currentPrice <= stopLossThreshold;\n  }\n\n  // For short positions (sell), trigger stop loss if price rises above threshold\n  if (position.action === 'sell') {\n    const stopLossThreshold = position.entryPrice * (1 + stopLossConfig.percentage / 100);\n    return currentPrice >= stopLossThreshold;\n  }\n\n  return false;\n};\n\n// Check if take profit should be triggered\nexport const checkTakeProfit = (\n    position: Position,\n    currentPrice: number,\n    takeProfitConfig: TakeProfitConfig // Require config to be passed\n): boolean => {\n    if (!takeProfitConfig.enabled || !currentPrice) {\n        return false;\n    }\n\n    // For long positions (buy), trigger take profit if price rises above threshold\n    if (position.action === 'buy') {\n        const takeProfitThreshold = position.entryPrice * (1 + takeProfitConfig.percentage / 100);\n        return currentPrice >= takeProfitThreshold;\n    }\n\n    // For short positions (sell), trigger take profit if price drops below threshold\n    if (position.action === 'sell') {\n        const takeProfitThreshold = position.entryPrice * (1 - takeProfitConfig.percentage / 100);\n        return currentPrice <= takeProfitThreshold;\n    }\n\n    return false;\n};\n\n\n// Format stop loss message\nexport const formatStopLossMessage = (\n  position: Position,\n  currentPrice: number,\n  stopLossConfig: StopLossConfig // Require config\n): string => {\n  const direction = position.action === 'buy' ? 'dropped' : 'increased';\n  const threshold = position.action === 'buy'\n    ? position.entryPrice * (1 - stopLossConfig.percentage / 100)\n    : position.entryPrice * (1 + stopLossConfig.percentage / 100);\n\n  return `Stop loss triggered for ${position.pair}: Price ${direction} to ${currentPrice.toFixed(4)} (${stopLossConfig.percentage}% from entry ${position.entryPrice.toFixed(4)})`;\n};\n\n// Format take profit message\nexport const formatTakeProfitMessage = (\n    position: Position,\n    currentPrice: number,\n    takeProfitConfig: TakeProfitConfig // Require config\n): string => {\n    const direction = position.action === 'buy' ? 'increased' : 'dropped';\n    const threshold = position.action === 'buy'\n        ? position.entryPrice * (1 + takeProfitConfig.percentage / 100)\n        : position.entryPrice * (1 - takeProfitConfig.percentage / 100);\n\n    return `Take profit triggered for ${position.pair}: Price ${direction} to ${currentPrice.toFixed(4)} (${takeProfitConfig.percentage}% from entry ${position.entryPrice.toFixed(4)})`;\n};\n\n\n// Calculate potential loss at stop loss point (might not be needed)\nexport const calculatePotentialLoss = (\n  position: Position,\n  stopLossConfig: StopLossConfig\n): number => {\n  const stopLossPrice = position.action === 'buy'\n    ? position.entryPrice * (1 - stopLossConfig.percentage / 100)\n    : position.entryPrice * (1 + stopLossConfig.percentage / 100);\n\n  const loss = position.action === 'buy'\n    ? (stopLossPrice - position.entryPrice) * position.amount\n    : (position.entryPrice - stopLossPrice) * position.amount;\n\n  return Math.abs(loss);\n};\n\n// Calculate potential profit at take profit point (might not be needed)\nexport const calculatePotentialProfit = (\n    position: Position,\n    takeProfitConfig: TakeProfitConfig\n): number => {\n    const takeProfitPrice = position.action === 'buy'\n        ? position.entryPrice * (1 + takeProfitConfig.percentage / 100)\n        : position.entryPrice * (1 - takeProfitConfig.percentage / 100);\n\n    const profit = position.action === 'buy'\n        ? (takeProfitPrice - position.entryPrice) * position.amount\n        : (position.entryPrice - takeProfitPrice) * position.amount;\n\n    return profit; // Profit can be positive or negative if TP is set aggressively\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotrader/src/lib/jupiter.ts"],"sourcesContent":["'use client';\n\nimport { Connection, PublicKey, Transaction, VersionedTransaction, SendTransactionError } from '@solana/web3.js';\nimport { WalletContextState } from '@solana/wallet-adapter-react'; // Import WalletContextState\nimport { useState, useEffect, useCallback } from 'react'; // Added useCallback\n\n// Constants for Jupiter API\nconst JUPITER_QUOTE_API = 'https://quote-api.jup.ag/v6/quote';\nconst JUPITER_SWAP_API = 'https://quote-api.jup.ag/v6/swap';\n\n// Token constants\nexport const SOL_MINT = 'So11111111111111111111111111111111111111112';\nexport const USDC_MINT = 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v';\n\n// Interface for quote parameters\ninterface QuoteParams {\n  inputMint: string;\n  outputMint: string;\n  amount: string;\n  slippageBps: number;\n}\n\n// Interface for swap parameters\ninterface SwapParams {\n  quoteResponse: any;\n  userPublicKey: string;\n}\n\n// Get quote from Jupiter\nexport const getJupiterQuote = async (params: QuoteParams) => {\n  try {\n    const { inputMint, outputMint, amount, slippageBps } = params;\n    \n    // Request dynamic compute unit price for priority fees\n    const queryParams = new URLSearchParams({\n      inputMint,\n      outputMint,\n      amount,\n      slippageBps: slippageBps.toString(),\n      computeUnitPriceMicroLamports: 'auto', // Request dynamic fees\n      // asLegacyTransaction: 'false', // Ensure VersionedTransaction is returned (default is false)\n    });\n    \n    const response = await fetch(`${JUPITER_QUOTE_API}?${queryParams.toString()}`);\n\n    if (!response.ok) {\n      let errorBody = `Status: ${response.status} ${response.statusText}`;\n      try {\n        const jsonError = await response.json();\n        errorBody = JSON.stringify(jsonError);\n      } catch (e) {\n        // Ignore if response body is not JSON\n      }\n      console.error('Jupiter quote API error response:', errorBody);\n      throw new Error(`Jupiter quote API error: ${errorBody}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching Jupiter quote:', error);\n    throw error;\n  }\n};\n\n// Prepare swap transaction\nexport const prepareJupiterSwapTransaction = async (params: SwapParams) => {\n  try {\n    const { quoteResponse, userPublicKey } = params;\n    \n    const response = await fetch(JUPITER_SWAP_API, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        quoteResponse,\n        userPublicKey,\n        // Pass dynamic priority fee info if available in quoteResponse\n        computeUnitPriceMicroLamports: quoteResponse.computeUnitPriceMicroLamports ?? undefined, \n        // asLegacyTransaction: false, // Ensure VersionedTransaction is returned\n      }),\n    });\n\n    if (!response.ok) {\n      let errorBody = `Status: ${response.status} ${response.statusText}`;\n      try {\n        const jsonError = await response.json();\n        errorBody = JSON.stringify(jsonError);\n      } catch (e) {\n        // Ignore if response body is not JSON\n      }\n      console.error('Jupiter swap API error response:', errorBody);\n      throw new Error(`Jupiter swap API error: ${errorBody}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error preparing Jupiter swap transaction:', error);\n    throw error;\n  }\n};\n\n// Execute swap transaction\n// Accepts sendTransaction function directly\nexport const executeJupiterSwap = async (\n  swapResponseData: any, \n  sendTransaction: WalletContextState['sendTransaction'], // Use WalletContextState type\n  connection: Connection\n) => { \n  try {\n    let transaction;\n    const base64Transaction = swapResponseData.swapTransaction; // Get the base64 string directly\n\n    // Check if the base64 string exists\n    if (base64Transaction && typeof base64Transaction === 'string') {\n      // Deserialize the VersionedTransaction\n      const serializedTransaction = Buffer.from(base64Transaction, 'base64');\n      transaction = VersionedTransaction.deserialize(serializedTransaction);\n    } else {\n      // Log the unexpected structure and throw error\n      console.error('Unexpected swap response structure or missing swapTransaction field:', swapResponseData);\n      throw new Error('Invalid transaction format received from Jupiter API');\n    }\n\n    // Send transaction using the provided function\n    let signature;\n    try {\n      console.log('Attempting to send transaction via wallet adapter...'); // Log before sending\n      // The wallet adapter's sendTransaction handles signing\n      signature = await sendTransaction(transaction, connection); \n      console.log('Transaction sent successfully, signature:', signature); // Log after successful send\n    } catch (signError) {\n      // Catch potential SendTransactionError for more details\n      if (signError instanceof SendTransactionError) {\n        console.error('SendTransactionError:', signError.message);\n        console.error('Logs:', signError.logs);\n      }\n      console.error('Full error object during signing/sending transaction:', signError); // Log the full error\n      throw signError; // Re-throw the specific error\n    }\n\n    // Wait for confirmation with increased timeout and strategy\n    let confirmation;\n    try {\n      console.log(`Waiting for confirmation for signature: ${signature}`); \n      // Get the latest blockhash for confirmation strategy\n      const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash('confirmed'); \n      confirmation = await connection.confirmTransaction({\n        signature, // Keep only one signature property\n        blockhash, // Use the latest blockhash\n        lastValidBlockHeight // Use the associated block height\n      }, 'confirmed'); // Pass commitment as the second argument\n\n      // Check for confirmation error within the response value\n      if (confirmation.value.err) { \n        console.error('Transaction confirmation failed:', confirmation.value.err);\n        throw new Error(`Transaction confirmation failed: ${JSON.stringify(confirmation.value.err)}`);\n      }\n\n      console.log('Transaction confirmed successfully:', confirmation); \n    } catch (confirmError) {\n      console.error(`Error confirming transaction ${signature}:`, confirmError); // Log the specific error here\n      // Optionally, you might want to handle confirmation errors differently\n      // For now, we'll re-throw\n      throw confirmError;\n    }\n\n    return {\n      signature,\n      confirmation,\n    };\n  } catch (error) {\n    // Log the full error object for better debugging\n    console.error('Full error object during Jupiter swap execution:', error);\n    // Keep the original error throwing behavior\n    throw error;\n  }\n};\n\n// Hook exposing the trading function (no longer manages wallet state directly)\nconst useJupiterTrading = () => {\n\n  // Execute trade with strategy - now requires wallet context\n  // Use useCallback to memoize the function\n  const executeTradeWithStrategy = useCallback(async ( \n    inputToken: string,\n    outputToken: string,\n    amount: string,\n    slippage: number,\n    strategy: string,\n    // Required parameters from useWallet hook\n    publicKey: PublicKey | null, \n    sendTransaction: WalletContextState['sendTransaction'],\n    userPublicKeyString: string | null // Added userPublicKey as string\n  ) => {\n    // Check for publicKey (as PublicKey object) and userPublicKeyString (as string)\n    if (!publicKey || !userPublicKeyString || !sendTransaction) { \n      return {\n        success: false,\n        error: 'Wallet not connected or sendTransaction not available',\n      };\n    }\n    \n    try {\n      // Create connection to Solana - Consider making RPC endpoint configurable via hook params or context\n      const connection = new Connection(\n        process.env.NEXT_PUBLIC_RPC_ENDPOINT || 'https://api.mainnet-beta.solana.com', \n        'confirmed'\n      );\n      \n      // Apply strategy parameters (this would be expanded based on strategy type)\n      const slippageBps = slippage * 100; // Convert percentage to basis points\n      \n      // Get quote from Jupiter\n      console.log(`Getting quote for ${amount} ${inputToken} to ${outputToken} with ${slippage}% slippage`);\n      const quoteResponse = await getJupiterQuote({\n        inputMint: inputToken,\n        outputMint: outputToken,\n        amount,\n        slippageBps,\n      });\n      \n      console.log('Quote received:', quoteResponse);\n      \n      // Prepare swap transaction - use the passed userPublicKeyString\n      console.log('Preparing swap transaction...');\n      // Assert that userPublicKeyString is non-null here, as the initial check guarantees it.\n      // This satisfies TypeScript's strict checking within the async function scope.\n      if (!userPublicKeyString) {\n         // This should theoretically never happen due to the check at the function start\n         console.error(\"Critical Error: userPublicKeyString is null despite initial check.\");\n         throw new Error(\"User public key is unexpectedly null during swap preparation.\");\n      }\n      const swapResponse = await prepareJupiterSwapTransaction({\n        quoteResponse,\n        userPublicKey: userPublicKeyString, // TypeScript now knows this is a string\n      });\n\n      console.log('Swap transaction prepared:', swapResponse);\n      \n      // Execute swap - pass sendTransaction function\n      console.log('Executing swap...');\n      const result = await executeJupiterSwap(swapResponse, sendTransaction, connection);\n      \n      console.log('Swap executed:', result);\n      \n      return {\n        success: true,\n        signature: result.signature,\n        inputAmount: amount,\n        expectedOutputAmount: quoteResponse.outAmount,\n        strategy,\n      };\n    } catch (error) {\n      // Log the full error object for better debugging\n      console.error('Full error object during trade execution:', error);\n      return {\n        success: false,\n        // Provide more detail if available, otherwise keep original message\n        error: error instanceof Error ? error.message : JSON.stringify(error),\n      };\n    }\n  // Dependency array for useCallback is empty as it doesn't depend on props/state of this hook\n  }, []); \n  \n  return {\n    executeTradeWithStrategy, // Return the memoized function\n    // Removed wallet state management from this hook\n  };\n};\n\nexport default useJupiterTrading;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotrader/src/lib/marketData.ts"],"sourcesContent":["import { RateLimiter } from 'limiter';\r\n\r\n// --- Interfaces ---\r\n// Example structure - adjust based on actual API response\r\ninterface OhlcvDataPoint {\r\n  timestamp: number; // Unix timestamp (seconds)\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n}\r\n\r\n// Structure for search results (adjust based on actual API response)\r\ninterface PoolSearchResult {\r\n    id: string; // Pool address\r\n    type: string; // Should be 'pool'\r\n    attributes: {\r\n        name: string; // e.g., \"SOL / USDC\"\r\n        address: string; // Pool address again\r\n        base_token_price_usd: string;\r\n        quote_token_price_usd: string;\r\n        // Add other relevant fields if needed\r\n    };\r\n    relationships?: { // Optional relationships to get token addresses\r\n        base_token: { data: { id: string } };\r\n        quote_token: { data: { id: string } };\r\n    };\r\n}\r\n\r\n// Define timeframe types supported by GeckoTerminal API\r\ntype GeckoTerminalTimeframe = 'day' | 'hour' | 'minute';\r\n\r\n// Define aggregate values based on timeframe\r\nconst TIMEFRAME_AGGREGATES = {\r\n  day: 1,\r\n  hour: [1, 4, 12], // Example aggregates for hourly\r\n  minute: [1, 5, 15], // Example aggregates for minute\r\n};\r\n\r\n// Rate limiter: 30 requests per minute (GeckoTerminal free tier limit)\r\nconst limiter = new RateLimiter({ tokensPerInterval: 30, interval: 'minute' });\r\n\r\n// Base URL for GeckoTerminal API v2\r\nconst GECKO_TERMINAL_API_BASE = 'https://api.geckoterminal.com/api/v2';\r\n\r\n// --- Caching ---\r\n// Simple in-memory cache for pool addresses { pairString: poolAddress }\r\nconst poolAddressCache = new Map<string, string>();\r\nconst CACHE_DURATION_MS = 60 * 60 * 1000; // Cache for 1 hour\r\n\r\n// --- Functions ---\r\n\r\n/**\r\n * Searches for a pool address on GeckoTerminal for a given pair string (e.g., \"SOL/USDC\").\r\n * Uses caching to avoid redundant searches.\r\n * Handles rate limiting.\r\n *\r\n * @param pairString The trading pair (e.g., \"SOL/USDC\").\r\n * @param network Solana network ('solana').\r\n * @returns Promise resolving to the pool address string or null if not found or error.\r\n */\r\nexport const findPoolAddress = async (\r\n    pairString: string,\r\n    network: string = 'solana'\r\n): Promise<string | null> => {\r\n    const cacheKey = `${network}:${pairString}`;\r\n    const cached = poolAddressCache.get(cacheKey);\r\n    if (cached) {\r\n        console.log(`Cache hit for pool address: ${pairString}`);\r\n        return cached;\r\n    }\r\n\r\n    console.log(`Searching for pool address for pair: ${pairString}`);\r\n    // Wait for rate limiter token\r\n    await limiter.removeTokens(1);\r\n\r\n    const params = new URLSearchParams({\r\n        query: pairString,\r\n        network: network,\r\n        include: 'base_token,quote_token', // Include token info if needed\r\n        page: '1',\r\n    });\r\n\r\n    const url = `${GECKO_TERMINAL_API_BASE}/search/pools?${params.toString()}`;\r\n\r\n    try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n            console.error(`GeckoTerminal Search API error: ${response.status} ${response.statusText}`);\r\n             try {\r\n               const errorData = await response.json();\r\n               console.error('GeckoTerminal Search error details:', errorData);\r\n             } catch (e) { /* Ignore */ }\r\n            return null;\r\n        }\r\n\r\n        const results = await response.json();\r\n\r\n        // Find the most relevant pool (e.g., first result, or filter by DEX/liquidity later)\r\n        const pool = results?.data?.find((item: PoolSearchResult) => item.type === 'pool');\r\n\r\n        if (pool && pool.attributes?.address) {\r\n            const poolAddress = pool.attributes.address;\r\n            console.log(`Found pool address for ${pairString}: ${poolAddress}`);\r\n            // Cache the result\r\n            poolAddressCache.set(cacheKey, poolAddress);\r\n            // Set timeout to clear cache entry after duration\r\n            setTimeout(() => {\r\n                poolAddressCache.delete(cacheKey);\r\n                console.log(`Cache expired for pool address: ${pairString}`);\r\n            }, CACHE_DURATION_MS);\r\n            return poolAddress;\r\n        } else {\r\n            console.warn(`Pool address not found for pair: ${pairString}`);\r\n            return null;\r\n        }\r\n\r\n    } catch (error: any) {\r\n        console.error(`Error searching for pool address for ${pairString}:`, error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Fetches historical OHLCV data for a given Solana pool address from GeckoTerminal.\r\n * Handles rate limiting.\r\n *\r\n * @param poolAddress The pool address on Solana.\r\n * @param timeframe The candle timeframe ('day', 'hour', 'minute').\r\n * @param aggregate The aggregation period (e.g., 1 for daily, 1/5/15 for minutely).\r\n * @param limit Max number of data points (default 100, max 1000).\r\n * @param beforeTimestamp Fetch data before this Unix timestamp (seconds) for pagination.\r\n * @returns Promise resolving to an array of OHLCV data points or null on error.\r\n */\r\nexport const fetchGeckoTerminalOhlcv = async (\r\n  poolAddress: string, // Network is assumed 'solana' now\r\n  timeframe: GeckoTerminalTimeframe,\r\n  aggregate: number,\r\n  limit: number = 100,\r\n  beforeTimestamp?: number\r\n): Promise<OhlcvDataPoint[] | null> => {\r\n  // Validate aggregate based on timeframe\r\n  if (\r\n    (timeframe === 'day' && aggregate !== 1) ||\r\n    (timeframe === 'hour' && !TIMEFRAME_AGGREGATES.hour.includes(aggregate)) ||\r\n    (timeframe === 'minute' && !TIMEFRAME_AGGREGATES.minute.includes(aggregate))\r\n  ) {\r\n    console.error(`Invalid aggregate value ${aggregate} for timeframe ${timeframe}`);\r\n    return null;\r\n  }\r\n\r\n  // Wait for rate limiter token\r\n  await limiter.removeTokens(1);\r\n\r\n  const params = new URLSearchParams({\r\n    aggregate: aggregate.toString(),\r\n    limit: limit.toString(),\r\n    currency: 'usd', // Fetch prices in USD\r\n  });\r\n\r\n  if (beforeTimestamp) {\r\n    params.append('before_timestamp', beforeTimestamp.toString());\r\n  }\r\n\r\n  const network = 'solana'; // Hardcode network for this function\r\n  const url = `${GECKO_TERMINAL_API_BASE}/networks/${network}/pools/${poolAddress}/ohlcv/${timeframe}?${params.toString()}`;\r\n\r\n  // console.log(`Fetching GeckoTerminal OHLCV: ${url}`); // Reduce logging verbosity\r\n\r\n  try {\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'Accept': 'application/json;version=20240314' // Specify API version if needed\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.error(`GeckoTerminal API error: ${response.status} ${response.statusText}`);\r\n      try {\r\n        const errorData = await response.json();\r\n        console.error('GeckoTerminal error details:', errorData);\r\n      } catch (e) { /* Ignore if error response is not JSON */ }\r\n      return null;\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    // Extract the OHLCV list - structure might vary, check API docs\r\n    const ohlcvList = data?.data?.attributes?.ohlcv_list;\r\n\r\n    if (!Array.isArray(ohlcvList)) {\r\n      console.error('Unexpected API response structure:', data);\r\n      return null;\r\n    }\r\n\r\n    // Format the data (assuming [timestamp, open, high, low, close, volume])\r\n    const formattedData: OhlcvDataPoint[] = ohlcvList.map((candle: number[]) => ({\r\n      timestamp: candle[0],\r\n      open: candle[1],\r\n      high: candle[2],\r\n      low: candle[3],\r\n      close: candle[4],\r\n      volume: candle[5],\r\n    }));\r\n\r\n    // Return in ascending order (oldest first) if needed by indicators\r\n    return formattedData.reverse();\r\n\r\n  } catch (error: any) {\r\n    console.error('Error fetching GeckoTerminal OHLCV:', error.message);\r\n    return null;\r\n  }\r\n};\r\n\r\n// TODO: Implement caching mechanism (e.g., using localStorage or a simple in-memory cache)\r\n// TODO: Implement function to fetch data for multiple required timeframes respecting rate limits\r\n// Example: fetchMultiTimeframeData(poolAddress, ['14d', '7d_hourly', '24h_15min'])\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 470, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotrader/src/lib/marketAnalysis.ts"],"sourcesContent":["import { fetchGeckoTerminalOhlcv } from './marketData';\r\nimport { EMA, RSI, MACD, BollingerBands } from 'technicalindicators';\r\nimport { Position } from '@/lib/safetyFeatures'; // Import Position type\r\n\r\n// Define types (consider moving to a shared types file)\r\ninterface OhlcvDataPoint {\r\n  timestamp: number;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n}\r\n\r\ntype MarketCondition = 'Uptrend' | 'Ranging' | 'Unclear';\r\n\r\n// Export the interface\r\nexport interface AnalysisResult {\r\n  condition: MarketCondition;\r\n  // Add relevant indicator values or signals if needed later\r\n  // Allow for undefined values as indicators might not always calculate\r\n  indicators?: {\r\n    dailyEMA?: { short: number | undefined; long: number | undefined };\r\n    hourlyRSI?: number | undefined;\r\n    // Use ReturnType to correctly infer the MACD output type, allow undefined\r\n    fifteenMinMACD?: ReturnType<typeof MACD['calculate']>[number] | undefined;\r\n    // Add others as needed, allowing undefined\r\n  };\r\n}\r\n\r\n// --- Configuration ---\r\nconst DAILY_CANDLE_COUNT = 14;\r\nconst HOURLY_CANDLE_COUNT = 7 * 24; // 7 days\r\nconst FIFTEEN_MIN_CANDLE_COUNT = 24 * 4; // 24 hours\r\n\r\n// Indicator Settings (Example - tune these)\r\nconst EMA_SHORT_PERIOD = 12;\r\nconst EMA_LONG_PERIOD = 26;\r\nconst RSI_PERIOD = 14;\r\nconst MACD_FAST_PERIOD = 12;\r\nconst MACD_SLOW_PERIOD = 26;\r\nconst MACD_SIGNAL_PERIOD = 9;\r\nconst BBANDS_PERIOD = 20;\r\nconst BBANDS_STDDEV = 2;\r\n\r\n/**\r\n * Fetches multi-timeframe data for a given pool address.\r\n * Handles potential null responses from the fetch function.\r\n * TODO: Implement proper error handling and retries if needed.\r\n * TODO: Implement caching.\r\n */\r\nconst fetchAllTimeframes = async (poolAddress: string): Promise<{\r\n  daily: OhlcvDataPoint[] | null;\r\n  hourly: OhlcvDataPoint[] | null;\r\n  fifteenMin: OhlcvDataPoint[] | null;\r\n}> => {\r\n  console.log(`Fetching all timeframes for pool: ${poolAddress}`);\r\n  try {\r\n    // Fetch data concurrently respecting rate limits (limiter is in fetch function)\r\n    const [dailyData, hourlyData, fifteenMinData] = await Promise.all([\r\n      fetchGeckoTerminalOhlcv(poolAddress, 'day', 1, DAILY_CANDLE_COUNT),\r\n      fetchGeckoTerminalOhlcv(poolAddress, 'hour', 1, HOURLY_CANDLE_COUNT),\r\n      fetchGeckoTerminalOhlcv(poolAddress, 'minute', 15, FIFTEEN_MIN_CANDLE_COUNT),\r\n    ]);\r\n\r\n    console.log(`Fetched Daily: ${dailyData?.length}, Hourly: ${hourlyData?.length}, 15-Min: ${fifteenMinData?.length}`);\r\n\r\n    return {\r\n      daily: dailyData,\r\n      hourly: hourlyData,\r\n      fifteenMin: fifteenMinData,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error fetching multi-timeframe data:\", error);\r\n    return { daily: null, hourly: null, fifteenMin: null };\r\n  }\r\n};\r\n\r\n/**\r\n * Calculates indicators based on OHLCV data.\r\n * Requires data to be sorted oldest to newest.\r\n */\r\nconst calculateIndicators = (data: OhlcvDataPoint[]) => {\r\n  if (!data || data.length === 0) {\r\n    return {}; // Return empty object if no data\r\n  }\r\n\r\n  const closePrices = data.map(d => d.close);\r\n  // Keep other price arrays if needed for other indicators\r\n  // const highPrices = data.map(d => d.high);\r\n  // const lowPrices = data.map(d => d.low);\r\n  // const openPrices = data.map(d => d.open);\r\n  // const volume = data.map(d => d.volume);\r\n\r\n  // Ensure enough data points for calculations\r\n  const indicators = {\r\n    emaShort: closePrices.length >= EMA_SHORT_PERIOD ? EMA.calculate({ period: EMA_SHORT_PERIOD, values: closePrices }) : [],\r\n    emaLong: closePrices.length >= EMA_LONG_PERIOD ? EMA.calculate({ period: EMA_LONG_PERIOD, values: closePrices }) : [],\r\n    rsi: closePrices.length >= RSI_PERIOD ? RSI.calculate({ period: RSI_PERIOD, values: closePrices }) : [],\r\n    macd: closePrices.length >= MACD_SLOW_PERIOD ? MACD.calculate({\r\n      values: closePrices,\r\n      fastPeriod: MACD_FAST_PERIOD,\r\n      slowPeriod: MACD_SLOW_PERIOD,\r\n      signalPeriod: MACD_SIGNAL_PERIOD,\r\n      SimpleMAOscillator: false, // Use EMA for MACD\r\n      SimpleMASignal: false,   // Use EMA for Signal line\r\n    }) : [],\r\n    bbands: closePrices.length >= BBANDS_PERIOD ? BollingerBands.calculate({\r\n        period: BBANDS_PERIOD,\r\n        values: closePrices,\r\n        stdDev: BBANDS_STDDEV\r\n    }) : [],\r\n    // Add other indicators as needed\r\n  };\r\n\r\n  // Return the latest values\r\n  return {\r\n     latestEmaShort: indicators.emaShort[indicators.emaShort.length - 1],\r\n     latestEmaLong: indicators.emaLong[indicators.emaLong.length - 1],\r\n     latestRsi: indicators.rsi[indicators.rsi.length - 1],\r\n     latestMacd: indicators.macd[indicators.macd.length - 1], // MACD object { MACD, signal, histogram }\r\n     latestBbands: indicators.bbands[indicators.bbands.length - 1], // BBands object { middle, upper, lower, pb }\r\n  };\r\n};\r\n\r\n\r\n/**\r\n * Assesses the market structure based on multi-timeframe data and indicators.\r\n * This is the core logic that needs careful implementation based on the strategy.\r\n *\r\n * @param poolAddress The pool address to analyze.\r\n * @returns Promise resolving to the determined market condition.\r\n */\r\nexport const assessMarketStructure = async (poolAddress: string): Promise<AnalysisResult> => {\r\n  const { daily, hourly, fifteenMin } = await fetchAllTimeframes(poolAddress);\r\n\r\n  // --- Basic Checks ---\r\n  if (!daily || !hourly || !fifteenMin || daily.length < DAILY_CANDLE_COUNT || hourly.length < 2 || fifteenMin.length < 2) {\r\n     console.warn(\"Insufficient data for market analysis.\");\r\n     return { condition: 'Unclear' };\r\n  }\r\n\r\n  // --- Calculate Indicators ---\r\n  const dailyIndicators = calculateIndicators(daily);\r\n  const hourlyIndicators = calculateIndicators(hourly);\r\n  const fifteenMinIndicators = calculateIndicators(fifteenMin);\r\n\r\n  console.log(\"Daily Indicators:\", dailyIndicators);\r\n  console.log(\"Hourly Indicators:\", hourlyIndicators);\r\n  console.log(\"15-Min Indicators:\", fifteenMinIndicators);\r\n\r\n\r\n  // --- Market Condition Logic ---\r\n  let determinedCondition: MarketCondition = 'Unclear'; // Default to Unclear\r\n\r\n  // --- Trend Analysis (Daily & Hourly) ---\r\n  const dailyEmaShort = dailyIndicators.latestEmaShort;\r\n  const dailyEmaLong = dailyIndicators.latestEmaLong;\r\n  const hourlyRsi = hourlyIndicators.latestRsi;\r\n\r\n  const isDailyTrendingUp = dailyEmaShort && dailyEmaLong && dailyEmaShort > dailyEmaLong;\r\n\r\n  // --- Ranging Analysis (Hourly Bollinger Bands & RSI) ---\r\n  const hourlyBbands = hourlyIndicators.latestBbands;\r\n  let isHourlyRanging = false;\r\n  if (hourlyBbands && hourlyRsi) {\r\n      const bandWidth = (hourlyBbands.upper - hourlyBbands.lower) / hourlyBbands.middle;\r\n      if (bandWidth < 0.1 && hourlyRsi > 40 && hourlyRsi < 60) { // Example thresholds\r\n          isHourlyRanging = true;\r\n      }\r\n  }\r\n\r\n  // --- Determine Condition ---\r\n  if (isDailyTrendingUp) {\r\n      if (hourlyRsi && hourlyRsi > 50) { // Confirming with RSI > 50\r\n          determinedCondition = 'Uptrend';\r\n      } else {\r\n          determinedCondition = 'Unclear'; // Weak confirmation\r\n      }\r\n  } else if (isHourlyRanging) {\r\n      determinedCondition = 'Ranging';\r\n  } else {\r\n      determinedCondition = 'Unclear'; // Default if not clearly Uptrend or Ranging\r\n  }\r\n\r\n  console.log(`Determined Market Condition: ${determinedCondition}`);\r\n\r\n  return {\r\n      condition: determinedCondition,\r\n      indicators: { // Pass calculated indicators for strategy checks\r\n          dailyEMA: { short: dailyIndicators.latestEmaShort, long: dailyIndicators.latestEmaLong },\r\n          hourlyRSI: hourlyIndicators.latestRsi,\r\n          fifteenMinMACD: fifteenMinIndicators.latestMacd,\r\n      }\r\n   };\r\n};\r\n\r\n// --- Strategy Execution Logic (To be called from BotControl) ---\r\n\r\n/**\r\n * Checks if TrendTracker entry conditions are met.\r\n * @param analysisResult The result from assessMarketStructure.\r\n * @param currentFifteenMinData The latest 15-min candle data.\r\n */\r\nexport const checkTrendTrackerEntry = (\r\n    analysisResult: AnalysisResult,\r\n    currentFifteenMinData: OhlcvDataPoint[]\r\n): boolean => {\r\n    if (analysisResult.condition !== 'Uptrend') return false;\r\n\r\n    console.log(\"Checking TrendTracker Entry Conditions...\");\r\n\r\n    // --- Get Indicators ---\r\n    const indicators = analysisResult.indicators;\r\n    const fifteenMinIndicators = calculateIndicators(currentFifteenMinData); // Calculate 15min indicators\r\n\r\n    if (!indicators || !indicators.dailyEMA || !indicators.hourlyRSI || !fifteenMinIndicators.latestMacd || !fifteenMinIndicators.latestRsi) {\r\n        console.log(\"TrendTracker Reject: Missing required indicator data.\");\r\n        return false;\r\n    }\r\n\r\n    // 1. EMA Crossover Check (Daily) - Already confirmed by 'Uptrend' condition, but double-check\r\n    const isDailyEMACrossedUp = indicators.dailyEMA.short && indicators.dailyEMA.long && indicators.dailyEMA.short > indicators.dailyEMA.long;\r\n    if (!isDailyEMACrossedUp) {\r\n        console.log(\"TrendTracker Reject: Daily EMA check failed.\");\r\n        return false;\r\n    }\r\n\r\n    // 2. RSI Check (Hourly & 15-min)\r\n    // Hourly RSI > 50 (already checked in assessMarketStructure for Uptrend condition)\r\n    // 15-min RSI > 50 (confirming short-term momentum)\r\n    if (!indicators.hourlyRSI || indicators.hourlyRSI <= 50) {\r\n         console.log(`TrendTracker Reject: Hourly RSI (${indicators.hourlyRSI}) not > 50.`);\r\n         return false;\r\n    }\r\n     if (!fifteenMinIndicators.latestRsi || fifteenMinIndicators.latestRsi <= 50) {\r\n         console.log(`TrendTracker Reject: 15min RSI (${fifteenMinIndicators.latestRsi}) not > 50.`);\r\n         return false;\r\n     }\r\n\r\n    // 3. MACD Check (15-min) - MACD line > signal line\r\n    const macdCheck = fifteenMinIndicators.latestMacd; // Use 15min MACD\r\n    if (!macdCheck || !macdCheck.MACD || !macdCheck.signal || macdCheck.MACD <= macdCheck.signal) {\r\n        console.log(\"TrendTracker Reject: 15min MACD line not above signal line.\");\r\n        return false;\r\n    }\r\n\r\n    // 4. Support/Resistance Break Check (Placeholder)\r\n    // TODO: Implement S/R detection (e.g., using pivot points or recent highs/lows on daily/hourly)\r\n    // TODO: Check if current price (e.g., currentFifteenMinData[currentFifteenMinData.length - 1].close) broke above a resistance level\r\n    console.log(\"TrendTracker S/R Break Check: Placeholder - Not Implemented.\");\r\n\r\n    // 5. Volume Confirmation (Placeholder)\r\n    // TODO: Implement volume analysis on breakout\r\n    console.log(\"TrendTracker Volume Check: Placeholder - Not Implemented.\");\r\n\r\n\r\n    // If all implemented checks pass:\r\n    console.log(\"TrendTracker Entry Conditions Met (Based on available checks).\");\r\n    return true;\r\n};\r\n\r\n/**\r\n * Checks if SmartRange Scout entry conditions are met.\r\n * @param analysisResult The result from assessMarketStructure.\r\n * @param currentFifteenMinData The latest 15-min candle data.\r\n */\r\nexport const checkSmartRangeEntry = (\r\n    analysisResult: AnalysisResult,\r\n    currentFifteenMinData: OhlcvDataPoint[]\r\n): boolean => {\r\n    if (analysisResult.condition !== 'Ranging') return false;\r\n\r\n    // TODO: Implement specific SmartRange Scout entry logic based on Task 1c/1e\r\n    // - Optional oscillator confirmation (e.g., Stochastic) - TBD\r\n\r\n    console.log(\"Checking SmartRange Scout Entry Conditions...\");\r\n\r\n    // --- Condition Checks ---\r\n    // Calculate indicators specifically for the 15-min timeframe provided\r\n    const fifteenMinIndicators = calculateIndicators(currentFifteenMinData);\r\n    const currentPrice = currentFifteenMinData[currentFifteenMinData.length - 1]?.close;\r\n    const bbands = fifteenMinIndicators.latestBbands; // Get latest BBands values { middle, upper, lower, pb }\r\n    const rsi = fifteenMinIndicators.latestRsi; // Get latest RSI value\r\n\r\n    if (!currentPrice || !bbands || !rsi) {\r\n        console.log(\"SmartRange Reject: Insufficient 15min indicator data.\");\r\n        return false;\r\n    }\r\n\r\n    // 1. Bollinger Band Check: Price near or below lower band\r\n    // Consider adding a small tolerance, e.g., price <= bbands.lower * 1.001\r\n    const isNearLowerBand = currentPrice <= bbands.lower;\r\n    if (!isNearLowerBand) {\r\n        console.log(`SmartRange Reject: Price (${currentPrice.toFixed(4)}) not near lower BB (${bbands.lower.toFixed(4)}).`);\r\n        return false;\r\n    }\r\n\r\n    // 2. RSI Check: RSI oversold\r\n    const isRSIOversold = rsi < 35; // Use a configurable threshold?\r\n    if (!isRSIOversold) {\r\n        console.log(`SmartRange Reject: 15min RSI (${rsi.toFixed(2)}) not oversold (< 35).`);\r\n        return false;\r\n    }\r\n\r\n    // 3. Support Level Confirmation (Placeholder)\r\n    // TODO: Implement S/R detection based on daily/hourly data\r\n    // TODO: Check if currentPrice is within a tolerance range of a detected support level\r\n    console.log(\"SmartRange Support Check: Placeholder - Not Implemented.\");\r\n\r\n\r\n    // If all implemented checks pass:\r\n    console.log(\"SmartRange Scout Entry Conditions Met (Based on available checks).\");\r\n    return true; // Allow entry if BB and RSI conditions met (pending S/R)\r\n};\r\n\r\n/**\r\n * Checks if TrendTracker exit conditions are met.\r\n * @param position The active position.\r\n * @param analysisResult The result from assessMarketStructure.\r\n * @param currentFifteenMinData The latest 15-min candle data.\r\n */\r\nexport const checkTrendTrackerExit = (\r\n    position: Position, // Need position info (entry price, etc.)\r\n    analysisResult: AnalysisResult,\r\n    currentFifteenMinData: OhlcvDataPoint[]\r\n): boolean => {\r\n    if (analysisResult.condition === 'Ranging' || analysisResult.condition === 'Unclear') {\r\n        console.log(\"TrendTracker Exit: Market condition changed from Uptrend.\");\r\n        return true; // Exit if market is no longer clearly trending up\r\n    }\r\n\r\n    // TODO: Implement specific TrendTracker exit logic\r\n    // - Trailing Stop Loss?\r\n    // - Price crosses below a key EMA (e.g., daily EMA long)?\r\n    // - RSI drops below a certain level (e.g., 50 or 40)?\r\n    // - MACD crossover downwards?\r\n\r\n    console.log(\"Checking TrendTracker Exit Conditions (Placeholder)...\");\r\n    return false; // Placeholder - don't exit yet\r\n};\r\n\r\n/**\r\n * Checks if SmartRange Scout exit conditions are met.\r\n * @param position The active position.\r\n * @param analysisResult The result from assessMarketStructure.\r\n * @param currentFifteenMinData The latest 15-min candle data.\r\n */\r\nexport const checkSmartRangeExit = (\r\n    position: Position, // Need position info (entry price, etc.)\r\n    analysisResult: AnalysisResult,\r\n    currentFifteenMinData: OhlcvDataPoint[]\r\n): boolean => {\r\n     if (analysisResult.condition === 'Uptrend' || analysisResult.condition === 'Unclear') {\r\n        console.log(\"SmartRange Exit: Market condition changed from Ranging.\");\r\n        return true; // Exit if market is no longer clearly ranging\r\n    }\r\n\r\n    // TODO: Implement specific SmartRange Scout exit logic\r\n    // - Price reaches range high or midpoint (needs range detection)?\r\n    // - RSI becomes overbought (e.g., > 70)?\r\n    // - Price breaks support (handled by SL)?\r\n\r\n    console.log(\"Checking SmartRange Exit Conditions (Placeholder)...\");\r\n    return false; // Placeholder - don't exit yet\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 747, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotrader/src/components/BotControl.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useWallet } from '@solana/wallet-adapter-react';\n// Import safety features (including TP types/functions now)\nimport {\n    Position,\n    StopLossConfig, checkStopLoss, formatStopLossMessage,\n    TakeProfitConfig, checkTakeProfit, formatTakeProfitMessage // Ensure TP imports are here\n} from '@/lib/safetyFeatures';\nimport useJupiterTrading, { SOL_MINT, USDC_MINT } from '@/lib/jupiter';\nimport useBotStore, { Trade } from '@/store/useBotStore'; // Import Zustand store and Trade type\n// Import market data and analysis functions\nimport { findPoolAddress, fetchGeckoTerminalOhlcv } from '@/lib/marketData'; // Import fetch function\nimport {\n    assessMarketStructure,\n    checkTrendTrackerEntry,\n    checkSmartRangeEntry,\n    checkTrendTrackerExit, // Import exit check\n    checkSmartRangeExit,  // Import exit check\n    AnalysisResult // Import AnalysisResult type\n} from '@/lib/marketAnalysis';\n\n\n// BotControl component refactored to use Zustand store\nconst BotControl = () => {\n  // Local state for UI feedback or component-specific logic\n  const [stopLossTriggeredUI, setStopLossTriggeredUI] = useState(false);\n  const [stopLossMessageUI, setStopLossMessageUI] = useState('');\n  const tradingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const [isProcessingTrade, setIsProcessingTrade] = useState(false); // Local state for disabling buttons during trade\n  const [currentPoolAddress, setCurrentPoolAddress] = useState<string | null>(null); // Cache pool address\n  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null); // Store last analysis\n\n  // --- Get state and actions from Zustand store ---\n  // Only select actions needed for handlers, read state inside loopLogic via getState()\n  const {\n    status, // Needed for effect dependencies and JSX\n    settings, // Needed for JSX display and handlers\n    activePositions, // Needed for JSX display\n    tradeHistory, // Needed for JSX display\n    errorMessage, // Needed for JSX display\n    startBot: storeStartBot,\n    stopBot: storeStopBot,\n    toggleTestMode: storeToggleTestMode,\n    addPosition,\n    removePosition,\n    addTradeHistory,\n    setError,\n    setRunning,\n    setAnalyzing,\n    setSettings,\n    setMarketCondition,\n  } = useBotStore((state) => ({\n      status: state.status,\n      settings: state.settings, // Keep settings for UI binding\n      activePositions: state.activePositions, // Keep for UI binding\n      tradeHistory: state.tradeHistory, // Keep for UI binding\n      errorMessage: state.errorMessage, // Keep for UI binding\n      startBot: state.startBot,\n      stopBot: state.stopBot,\n      toggleTestMode: state.toggleTestMode,\n      addPosition: state.addPosition,\n      removePosition: state.removePosition,\n      addTradeHistory: state.addTradeHistory,\n      setError: state.setError,\n      setRunning: state.setRunning,\n      setAnalyzing: state.setAnalyzing,\n      setSettings: state.setSettings,\n      setMarketCondition: state.setMarketCondition,\n  }));\n\n  // Destructure settings for easier access in JSX and handlers\n  const {\n    isTestMode,\n    stopLossPercentage,\n    takeProfitPercentage,\n    maxRuns,\n    runIntervalMinutes,\n    compoundCapital,\n    strategyType,\n    amount,\n    pair,\n    action,\n  } = settings;\n\n  // Get wallet context\n  const { publicKey, connected: isWalletConnected, sendTransaction } = useWallet();\n  // Get Jupiter trading function\n  const { executeTradeWithStrategy } = useJupiterTrading();\n\n\n  // --- Core Logic Functions ---\n\n  // Fetch current price (using GeckoTerminal 1-min candle close)\n  const fetchCurrentPrice = useCallback(async (fetchPair: string): Promise<number | null> => {\n    const poolAddress = currentPoolAddress ?? await findPoolAddress(fetchPair);\n    if (!poolAddress) {\n        console.error(`Cannot fetch price for ${fetchPair}, pool address unknown.`);\n        setError(`Pool address unknown for ${fetchPair}`);\n        return null;\n    }\n    if (poolAddress !== currentPoolAddress) setCurrentPoolAddress(poolAddress);\n\n    try {\n        const latestCandleData = await fetchGeckoTerminalOhlcv(poolAddress, 'minute', 1, 1);\n        const price = latestCandleData?.[0]?.close;\n        if (typeof price === 'number') {\n            return price;\n        } else {\n            console.warn(`Could not get latest close price for ${fetchPair} from GeckoTerminal.`);\n            return null;\n        }\n    } catch (error: any) {\n      console.error(`Error fetching current price for ${fetchPair} from GeckoTerminal:`, error.message);\n      setError(`Failed to fetch price: ${error.message}`);\n      return null;\n    }\n  }, [currentPoolAddress, setError]); // Depends on currentPoolAddress state\n\n\n  const handleStopLoss = useCallback(async (position: Position, currentPrice: number): Promise<boolean> => {\n    // Read latest settings directly from store inside the handler\n    const latestSettings = useBotStore.getState().settings;\n    const currentStopLossConfig: StopLossConfig = { enabled: true, percentage: latestSettings.stopLossPercentage };\n\n    if (!checkStopLoss(position, currentPrice, currentStopLossConfig)) return false;\n\n    const message = formatStopLossMessage(position, currentPrice, currentStopLossConfig);\n    console.log(`STOP LOSS TRIGGERED: ${message}`);\n    setStopLossTriggeredUI(true); // Update local UI state\n    setStopLossMessageUI(message);\n\n    if (!latestSettings.isTestMode) { // Use latest setting\n      try {\n        setIsProcessingTrade(true);\n        const exitAction = position.action === 'buy' ? 'sell' : 'buy';\n        const amountInSmallestUnit = (position.amount * Math.pow(10, 9)).toString(); // Assuming 9 decimals\n\n        const result = await executeTradeWithStrategy(\n          position.action === 'buy' ? SOL_MINT : USDC_MINT, // Determine mints based on position action\n          position.action === 'buy' ? USDC_MINT : SOL_MINT,\n          amountInSmallestUnit, 0.5, 'Stop Loss',\n          publicKey, sendTransaction, publicKey?.toBase58() || null\n        );\n        if (result.success) {\n          const exitTrade: Trade = {\n            id: `sl-${Date.now()}`, timestamp: new Date().toISOString(), pair: position.pair,\n            action: exitAction, amount: position.amount, price: currentPrice,\n            strategy: 'Stop Loss', success: true, signature: result.signature,\n          };\n          addTradeHistory(exitTrade);\n          removePosition(position.id);\n        } else { setError(`Stop loss trade failed: ${result.error}`); }\n      } catch (error: any) { setError(`Error executing stop loss: ${error.message}`); }\n      finally { if (isMountedRef.current) setIsProcessingTrade(false); } // Check mount status\n    } else {\n      const exitAction = position.action === 'buy' ? 'sell' : 'buy';\n      const exitTrade: Trade = {\n        id: `sl-sim-${Date.now()}`, timestamp: new Date().toISOString(), pair: position.pair,\n        action: exitAction, amount: position.amount, price: currentPrice,\n        strategy: 'Stop Loss', success: true,\n        signature: 'simulated_stop_loss_' + Math.random().toString(36).substring(2, 9),\n      };\n      addTradeHistory(exitTrade);\n      removePosition(position.id);\n    }\n    return true; // SL triggered\n  }, [publicKey, sendTransaction, executeTradeWithStrategy, addTradeHistory, removePosition, setError]); // Add dependencies\n\n  const handleTakeProfit = useCallback(async (position: Position, currentPrice: number): Promise<boolean> => {\n    const latestSettings = useBotStore.getState().settings;\n    const currentTakeProfitConfig: TakeProfitConfig = { enabled: true, percentage: latestSettings.takeProfitPercentage };\n\n    if (!checkTakeProfit(position, currentPrice, currentTakeProfitConfig)) return false;\n\n    const message = formatTakeProfitMessage(position, currentPrice, currentTakeProfitConfig);\n    console.log(`TAKE PROFIT TRIGGERED: ${message}`);\n\n    if (!latestSettings.isTestMode) {\n      try {\n        setIsProcessingTrade(true);\n        const exitAction = position.action === 'buy' ? 'sell' : 'buy';\n        const amountInSmallestUnit = (position.amount * Math.pow(10, 9)).toString();\n\n        const result = await executeTradeWithStrategy(\n          position.action === 'buy' ? SOL_MINT : USDC_MINT,\n          position.action === 'buy' ? USDC_MINT : SOL_MINT,\n          amountInSmallestUnit, 0.5, 'Take Profit',\n          publicKey, sendTransaction, publicKey?.toBase58() || null\n        );\n        if (result.success) {\n          const exitTrade: Trade = {\n            id: `tp-${Date.now()}`, timestamp: new Date().toISOString(), pair: position.pair,\n            action: exitAction, amount: position.amount, price: currentPrice,\n            strategy: 'Take Profit', success: true, signature: result.signature,\n          };\n          addTradeHistory(exitTrade);\n          removePosition(position.id);\n        } else { setError(`Take profit trade failed: ${result.error}`); }\n      } catch (error: any) { setError(`Error executing take profit: ${error.message}`); }\n      finally { if (isMountedRef.current) setIsProcessingTrade(false); }\n    } else {\n      const exitAction = position.action === 'buy' ? 'sell' : 'buy';\n      const exitTrade: Trade = {\n        id: `tp-sim-${Date.now()}`, timestamp: new Date().toISOString(), pair: position.pair,\n        action: exitAction, amount: position.amount, price: currentPrice,\n        strategy: 'Take Profit', success: true,\n        signature: 'simulated_take_profit_' + Math.random().toString(36).substring(2, 9),\n      };\n      addTradeHistory(exitTrade);\n      removePosition(position.id);\n    }\n    return true; // TP triggered\n  }, [publicKey, sendTransaction, executeTradeWithStrategy, addTradeHistory, removePosition, setError]); // Add dependencies\n\n   // Check Stop Loss and Take Profit for all active positions\n   const checkPositionsSLTP = useCallback(async (): Promise<boolean> => {\n       const currentActivePositions = useBotStore.getState().activePositions; // Get latest state\n       const currentPair = useBotStore.getState().settings.pair; // Get latest pair\n       const poolAddr = currentPoolAddress; // Use state pool address\n\n       if (currentActivePositions.length === 0 || !poolAddr) return false;\n       console.log(\"Checking SL/TP...\");\n\n       const currentPrice = await fetchCurrentPrice(currentPair);\n\n       if (currentPrice) {\n           console.log(`Current price for SL/TP check: ${currentPrice}`);\n           for (const position of [...currentActivePositions]) { // Iterate over latest positions\n               const tpTriggered = await handleTakeProfit(position, currentPrice);\n               if (tpTriggered) return true;\n               const slTriggered = await handleStopLoss(position, currentPrice);\n               if (slTriggered) return true;\n           }\n       } else {\n           console.warn(\"Could not fetch current price for SL/TP check.\");\n       }\n       return false;\n   }, [currentPoolAddress, fetchCurrentPrice, handleTakeProfit, handleStopLoss]); // Dependencies\n\n  // Simulate a single trade action (entry only for now)\n  const simulateTradeAction = useCallback((simAction: 'buy' | 'sell') => {\n    const { amount: currentAmount, pair: currentPair, strategyType: currentStrategy } = useBotStore.getState().settings;\n    console.log(`Simulating ${simAction} entry action...`);\n    const simPrice = parseFloat((Math.random() * 100 + 50).toFixed(2));\n    const simAmount = parseFloat((Math.random() * currentAmount).toFixed(3));\n\n    const trade: Trade = {\n        id: `sim-entry-${Date.now()}`, timestamp: new Date().toISOString(), pair: currentPair, action: simAction,\n        amount: simAmount, price: simPrice, strategy: currentStrategy, success: true,\n        signature: 'sim_entry_' + Math.random().toString(36).substring(2, 9),\n    };\n    addTradeHistory(trade);\n    const newPosition: Position = {\n        id: `pos-${Date.now()}`, pair: currentPair, entryPrice: simPrice, amount: simAmount,\n        timestamp: trade.timestamp, action: simAction\n    };\n    addPosition(newPosition);\n  }, [addPosition, addTradeHistory]); // Dependencies\n\n  // Execute a real trade based on strategy decision (entry only for now)\n  const executeRealTradeAction = useCallback(async (tradeAction: 'buy' | 'sell') => {\n      const { amount: currentAmount, pair: currentPair, strategyType: currentStrategy } = useBotStore.getState().settings;\n      const poolAddr = currentPoolAddress; // Use state pool address\n\n      if (isProcessingTrade || !poolAddr) return;\n      console.log(`Attempting real ${tradeAction} trade...`);\n      setIsProcessingTrade(true);\n      try {\n          const inputMint = tradeAction === 'buy' ? USDC_MINT : SOL_MINT;\n          const outputMint = tradeAction === 'buy' ? SOL_MINT : USDC_MINT;\n          const amountInSmallestUnit = (currentAmount * Math.pow(10, 9)).toString();\n\n          const result = await executeTradeWithStrategy(\n              inputMint, outputMint, amountInSmallestUnit, 0.5,\n              currentStrategy, publicKey, sendTransaction, publicKey?.toBase58() || null\n          );\n\n          if (result.success && result.expectedOutputAmount) {\n              const approxPrice = parseFloat(result.inputAmount || '0') / parseFloat(result.expectedOutputAmount);\n              const trade: Trade = {\n                  id: `real-${Date.now()}`, timestamp: new Date().toISOString(), pair: currentPair, action: tradeAction,\n                  amount: currentAmount, price: isNaN(approxPrice) ? 0 : approxPrice, strategy: currentStrategy, success: true, signature: result.signature\n              };\n              addTradeHistory(trade);\n              const newPosition: Position = {\n                  id: `pos-${Date.now()}`, pair: currentPair, entryPrice: isNaN(approxPrice) ? 0 : approxPrice, amount: currentAmount,\n                  timestamp: trade.timestamp, action: tradeAction\n              };\n              addPosition(newPosition);\n          } else {\n              setError(`Trade execution failed: ${result.error}`);\n              const failedTrade: Trade = {\n                  id: `fail-${Date.now()}`, timestamp: new Date().toISOString(), pair: currentPair, action: tradeAction,\n                  amount: currentAmount, price: 0, strategy: currentStrategy, success: false, error: result.error\n              };\n              addTradeHistory(failedTrade);\n          }\n      } catch (e: any) { setError(`Trade execution error: ${e.message}`); }\n      finally { if (isMountedRef.current) setIsProcessingTrade(false); }\n  }, [currentPoolAddress, executeTradeWithStrategy, publicKey, sendTransaction, addTradeHistory, addPosition, setError]); // Dependencies\n\n  // --- Combined Bot Lifecycle Effect ---\n  const isMountedRef = useRef(true); // Ref to track mount status\n\n  useEffect(() => {\n    isMountedRef.current = true;\n    let analysisRunning = false; // Local flag to prevent concurrent analysis runs\n\n    // Function to perform the core trading loop logic\n    const loopLogic = async () => {\n        if (!isMountedRef.current || useBotStore.getState().status !== 'running') return;\n        if (isProcessingTrade) {\n            console.log(\"Skipping loop iteration: Trade/Analysis in progress.\");\n            return;\n        }\n        console.log(\"Trading loop iteration...\");\n        setIsProcessingTrade(true);\n\n        const { settings: currentSettings, activePositions: currentActivePositions } = useBotStore.getState();\n        const { strategyType: currentStrategyType, action: currentAction, isTestMode: currentTestMode } = currentSettings;\n        const currentAnalysis = analysisResult; // Use analysis result from component state\n        const poolAddr = currentPoolAddress; // Use pool address from component state\n\n        if (!poolAddr || !currentAnalysis) {\n            console.error(\"Missing pool address or analysis result for loop logic.\");\n            setError(\"Internal error: Missing data for trading loop.\");\n            storeStopBot();\n            setIsProcessingTrade(false);\n            return;\n        }\n\n        // --- Check Strategy Exit / SL / TP ---\n        if (currentActivePositions.length > 0) {\n            const positionClosed = await checkPositionsSLTP();\n            if (useBotStore.getState().activePositions.length === 0 && currentActivePositions.length > 0) {\n                console.log(\"Position closed by SL/TP/Strategy Exit.\");\n                setIsProcessingTrade(false);\n                return;\n            }\n        }\n\n        // --- Check Entry Conditions ---\n        let shouldEnterTrade = false;\n        if (useBotStore.getState().activePositions.length === 0) {\n            console.log(\"No active position. Checking entry conditions...\");\n            const fifteenMinData = await fetchGeckoTerminalOhlcv(poolAddr, 'minute', 15, 10);\n            if (fifteenMinData && currentAnalysis) {\n                if (currentStrategyType === 'TrendTracker') {\n                    shouldEnterTrade = checkTrendTrackerEntry(currentAnalysis, fifteenMinData);\n                } else if (currentStrategyType === 'SmartRange Scout') {\n                    shouldEnterTrade = checkSmartRangeEntry(currentAnalysis, fifteenMinData);\n                }\n            } else {\n                console.warn(\"Could not fetch recent 15min data or analysis result missing for entry check.\");\n            }\n        } else {\n            console.log(\"Position already active, skipping entry check.\");\n        }\n\n        // --- Execute Trade ---\n        if (shouldEnterTrade) {\n            console.log(`Entry conditions met for ${currentStrategyType}. Attempting trade...`);\n            if (currentTestMode) {\n                simulateTradeAction(currentAction);\n            } else {\n                await executeRealTradeAction(currentAction);\n            }\n        } else {\n            console.log(\"Entry conditions not met or position already open.\");\n        }\n\n        setIsProcessingTrade(false);\n      };\n\n    // --- Effect Logic ---\n    if (status === 'analyzing' && !analysisRunning) {\n        analysisRunning = true;\n        const runInitialAnalysis = async () => {\n            if (!isMountedRef.current) return;\n            console.log(\"Starting initial market analysis...\");\n            setIsProcessingTrade(true);\n            const poolAddress = await findPoolAddress(pair);\n            if (!isMountedRef.current) { analysisRunning = false; return; }\n\n            if (!poolAddress) {\n                setError(`Could not find pool address for pair: ${pair}`);\n                storeStopBot();\n                if (isMountedRef.current) setIsProcessingTrade(false);\n                analysisRunning = false;\n                return;\n            }\n            if (isMountedRef.current) setCurrentPoolAddress(poolAddress);\n\n            const result = await assessMarketStructure(poolAddress);\n            if (!isMountedRef.current) { analysisRunning = false; return; }\n\n            setAnalysisResult(result);\n            setMarketCondition(result.condition);\n\n            if (result.condition === 'Unclear') {\n                console.log(\"Market condition unclear, bot will not start.\");\n                setError(\"Market condition unclear. Bot stopped.\");\n                storeStopBot();\n            } else {\n                console.log(`Initial analysis complete. Market Condition: ${result.condition}. Starting trading loop.`);\n                if (isMountedRef.current) {\n                     useBotStore.setState({ status: 'running' }); // Trigger the 'running' state\n                }\n            }\n            if (isMountedRef.current) setIsProcessingTrade(false);\n            analysisRunning = false;\n        };\n        runInitialAnalysis();\n\n    } else if (status === 'running') {\n        if (!tradingIntervalRef.current && currentPoolAddress && analysisResult) {\n            console.log(`Setting up trading loop interval: ${settings.runIntervalMinutes} mins.`);\n            // Run first loop logic slightly delayed to allow state to settle?\n            // setTimeout(loopLogic, 100); // Optional small delay\n            loopLogic(); // Run first iteration\n            tradingIntervalRef.current = setInterval(loopLogic, settings.runIntervalMinutes * 60 * 1000);\n        }\n    } else if (status === 'stopped') {\n        if (tradingIntervalRef.current) {\n            clearInterval(tradingIntervalRef.current);\n            tradingIntervalRef.current = null;\n            console.log(\"Trading loop stopped.\");\n        }\n    }\n\n    // Cleanup\n    return () => {\n        isMountedRef.current = false;\n        if (tradingIntervalRef.current) {\n            clearInterval(tradingIntervalRef.current);\n            tradingIntervalRef.current = null;\n            console.log(\"Cleaning up trading loop interval.\");\n        }\n    };\n  // Only depend on status and pair to trigger analysis or setup/teardown interval\n  }, [status, pair]);\n\n\n  // --- Event Handlers ---\n\n  const handleStartBot = () => {\n    if (!isWalletConnected || !publicKey) {\n      alert(\"Please connect your Phantom wallet first\");\n      return;\n    }\n    setStopLossTriggeredUI(false);\n    setStopLossMessageUI('');\n    setError(null);\n    setAnalysisResult(null);\n    setCurrentPoolAddress(null); // Reset pool address on start\n    useBotStore.setState({ status: 'analyzing', errorMessage: null, currentRun: 0 }); // Trigger analysis\n  };\n\n  const handleStopBot = () => {\n    storeStopBot(); // Sets status to 'stopped', useEffect clears interval\n  };\n\n  const handleToggleTestMode = () => {\n    if (status === 'running' || status === 'analyzing') {\n        alert(\"Please stop the bot before changing test mode.\");\n        return;\n    }\n    storeToggleTestMode();\n  };\n\n  // Handler for SL/TP/Runs/Interval/Compounding changes\n  const handleSettingChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value, type } = e.target;\n    let parsedValue: string | number | boolean = value;\n\n    if (type === 'number') {\n      parsedValue = parseFloat(value);\n      if (isNaN(parsedValue)) return;\n      if ((name === 'stopLossPercentage' || name === 'takeProfitPercentage') && parsedValue < 0) parsedValue = 0;\n      if (name === 'maxRuns' && parsedValue < 1) parsedValue = 1;\n      if (name === 'runIntervalMinutes' && parsedValue < 1) parsedValue = 1;\n    } else if (type === 'checkbox') {\n      parsedValue = (e.target as HTMLInputElement).checked;\n    }\n    setSettings({ [name]: parsedValue });\n  };\n\n\n  // --- JSX Rendering ---\n  const isRunning = status === 'running' || status === 'analyzing';\n  const lastTrade = tradeHistory.length > 0 ? tradeHistory[0] : null;\n\n  return (\n    <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg space-y-4\">\n      <h2 className=\"text-xl font-bold text-white\">Bot Control</h2>\n\n      {/* Test Mode Toggle */}\n      <div className=\"flex items-center\">\n        <label htmlFor=\"testModeToggle\" className=\"mr-2 text-gray-300\">Test Mode:</label>\n        <button\n          id=\"testModeToggle\"\n          onClick={handleToggleTestMode}\n          className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${\n            isTestMode ? 'bg-green-600 hover:bg-green-700' : 'bg-gray-600 hover:bg-gray-500'\n          } ${status !== 'stopped' ? 'opacity-50 cursor-not-allowed' : 'text-white'}`}\n          disabled={status !== 'stopped'} // Disable if bot is not stopped\n        >\n          {isTestMode ? 'Enabled' : 'Disabled'}\n        </button>\n        {!isTestMode && status === 'stopped' && (\n          <span className=\"ml-2 text-red-400 text-xs italic\">Warning: Real trading active!</span>\n        )}\n         {status !== 'stopped' && (\n          <span className=\"ml-2 text-yellow-400 text-xs italic\">Stop bot to change mode</span>\n        )}\n      </div>\n\n      {/* Stop Loss Input */}\n      <div className=\"flex items-center\">\n         <label htmlFor=\"stopLossPercentage\" className=\"mr-2 text-gray-300 whitespace-nowrap\">Stop Loss (%):</label>\n         <input\n            type=\"number\"\n            id=\"stopLossPercentage\"\n            name=\"stopLossPercentage\"\n            value={stopLossPercentage}\n            onChange={handleSettingChange}\n            min=\"0\"\n            step=\"0.1\"\n            className=\"w-full bg-gray-700 text-white px-3 py-1 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n            disabled={isRunning}\n         />\n      </div>\n\n       {/* Take Profit Input */}\n       <div className=\"flex items-center\">\n         <label htmlFor=\"takeProfitPercentage\" className=\"mr-2 text-gray-300 whitespace-nowrap\">Take Profit (%):</label>\n         <input\n            type=\"number\"\n            id=\"takeProfitPercentage\"\n            name=\"takeProfitPercentage\"\n            value={takeProfitPercentage}\n            onChange={handleSettingChange}\n            min=\"0\"\n            step=\"0.1\"\n            className=\"w-full bg-gray-700 text-white px-3 py-1 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n            disabled={isRunning}\n         />\n      </div>\n\n       {/* Max Runs Input */}\n       <div className=\"flex items-center\">\n         <label htmlFor=\"maxRuns\" className=\"mr-2 text-gray-300 whitespace-nowrap\">Max Runs:</label>\n         <input\n            type=\"number\"\n            id=\"maxRuns\"\n            name=\"maxRuns\"\n            value={maxRuns}\n            onChange={handleSettingChange}\n            min=\"1\"\n            step=\"1\"\n            className=\"w-full bg-gray-700 text-white px-3 py-1 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n            disabled={isRunning}\n         />\n      </div>\n\n       {/* Run Interval Input */}\n       <div className=\"flex items-center\">\n         <label htmlFor=\"runIntervalMinutes\" className=\"mr-2 text-gray-300 whitespace-nowrap\">Run Interval (min):</label>\n         <input\n            type=\"number\"\n            id=\"runIntervalMinutes\"\n            name=\"runIntervalMinutes\"\n            value={runIntervalMinutes}\n            onChange={handleSettingChange}\n            min=\"1\"\n            step=\"1\"\n            className=\"w-full bg-gray-700 text-white px-3 py-1 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n            disabled={isRunning}\n         />\n      </div>\n\n       {/* Compound Capital Toggle */}\n       <div className=\"flex items-center\">\n         <label htmlFor=\"compoundCapital\" className=\"mr-2 text-gray-300\">Compound Capital:</label>\n         <input\n            type=\"checkbox\"\n            id=\"compoundCapital\"\n            name=\"compoundCapital\"\n            checked={compoundCapital}\n            onChange={handleSettingChange}\n            className=\"form-checkbox h-4 w-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500 focus:ring-offset-gray-800\"\n            disabled={isRunning}\n         />\n      </div>\n\n\n      {/* Start/Stop Buttons */}\n      <div className=\"flex space-x-4 pt-2\">\n        {status !== 'running' && status !== 'analyzing' ? (\n          <button\n            onClick={handleStartBot}\n            className=\"flex-1 bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            disabled={!isWalletConnected || !publicKey || isProcessingTrade || status === 'error'}\n          >\n            {isProcessingTrade ? 'Processing...' : status === 'error' ? 'Error Occurred' : 'Start Trading'}\n          </button>\n        ) : (\n          <button\n            onClick={handleStopBot}\n            className=\"flex-1 bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            disabled={isProcessingTrade}\n          >\n            {status === 'analyzing' ? 'Stop Analysis' : 'Stop Trading'}\n          </button>\n        )}\n      </div>\n\n      {/* Status Indicator */}\n      {status !== 'stopped' && (\n        <div className=\"bg-gray-900 p-3 rounded-md text-center\">\n          <div className=\"flex items-center justify-center\">\n            <div className={`w-3 h-3 rounded-full mr-2 ${\n                status === 'running' ? 'bg-green-500 animate-pulse' :\n                status === 'analyzing' ? 'bg-yellow-500 animate-pulse' :\n                status === 'error' ? 'bg-red-500' : 'bg-gray-500' // Should not happen if not stopped\n            }`}></div>\n            <span className=\"text-sm text-gray-300\">\n                Bot status: <span className=\"font-medium\">{status}</span>\n                {status === 'running' && ` (${strategyType})`}\n            </span>\n          </div>\n        </div>\n      )}\n\n       {/* Error Message Display */}\n       {status === 'error' && errorMessage && ( // Access errorMessage directly from store state\n         <div className=\"mt-4 bg-red-900/50 p-3 rounded-md text-center\">\n             <p className=\"text-red-300 text-sm\">{errorMessage}</p> {/* Access errorMessage directly */}\n         </div>\n       )}\n\n\n      {/* Stop Loss Trigger Message */}\n      {stopLossTriggeredUI && (\n        <div className=\"mt-4 bg-red-900/50 p-3 rounded-md\">\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full mr-2\"></div>\n            <span className=\"text-red-300 text-sm\">{stopLossMessageUI}</span>\n          </div>\n        </div>\n      )}\n\n      {/* Active Positions Display - Reads from Zustand */}\n      {activePositions.length > 0 && (\n        <div className=\"mt-4\">\n          <h3 className=\"font-bold mb-2 text-white\">Active Positions</h3>\n          <div className=\"bg-gray-900 p-3 rounded-md max-h-40 overflow-y-auto\">\n            {activePositions.map((position) => (\n              <div key={position.id} className=\"border-b border-gray-700 py-2 last:border-0 text-xs\">\n                <div className=\"grid grid-cols-2 gap-1\">\n                  <div className=\"text-gray-400\">Pair: <span className=\"text-gray-200\">{position.pair}</span></div>\n                  <div className=\"text-gray-400\">Action: <span className={position.action === 'buy' ? 'text-green-400' : 'text-red-400'}>{position.action}</span></div>\n                  <div className=\"text-gray-400\">Amount: <span className=\"text-gray-200\">{position.amount}</span></div>\n                  <div className=\"text-gray-400\">Entry: <span className=\"text-gray-200\">${position.entryPrice.toFixed(4)}</span></div>\n                  <div className=\"text-gray-400\">Stop Loss: <span className=\"text-gray-200\">${(position.action === 'buy'\n                    ? position.entryPrice * (1 - stopLossPercentage / 100)\n                    : position.entryPrice * (1 + stopLossPercentage / 100)).toFixed(4)}</span></div>\n                  <div className=\"text-gray-400\">Time: <span className=\"text-gray-200\">{new Date(position.timestamp).toLocaleTimeString()}</span></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Last Trade Display - Reads from Zustand */}\n      {lastTrade && (\n        <div className=\"mt-4\">\n          <h3 className=\"font-bold mb-2 text-white\">Last Trade</h3>\n          <div className=\"bg-gray-900 p-3 rounded-md text-xs\">\n            <div className=\"grid grid-cols-2 gap-1\">\n              <div className=\"text-gray-400\">Pair: <span className=\"text-gray-200\">{lastTrade.pair}</span></div>\n              <div className=\"text-gray-400\">Action: <span className={lastTrade.action === 'buy' ? 'text-green-400' : 'text-red-400'}>{lastTrade.action}</span></div>\n              <div className=\"text-gray-400\">Amount: <span className=\"text-gray-200\">{lastTrade.amount}</span></div>\n              {/* Format price for display */}\n              <div className=\"text-gray-400\">Price: <span className=\"text-gray-200\">${Number(lastTrade.price).toFixed(4)}</span></div>\n              <div className=\"text-gray-400\">Status: <span className={lastTrade.success ? 'text-green-400' : 'text-red-400'}>{lastTrade.success ? 'Success' : 'Failed'}</span></div>\n              <div className=\"text-gray-400\">Time: <span className=\"text-gray-200\">{new Date(lastTrade.timestamp).toLocaleTimeString()}</span></div>\n              {lastTrade.signature && !lastTrade.signature.startsWith('sim') && (\n                <div className=\"col-span-2\">\n                  <a\n                    href={`https://solscan.io/tx/${lastTrade.signature}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-blue-400 hover:underline\"\n                  >\n                    View on Solscan\n                  </a>\n                </div>\n              )}\n               {lastTrade.error && (\n                 <div className=\"col-span-2 text-red-400\">Error: {lastTrade.error}</div>\n               )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Recent Trades Display - Reads from Zustand */}\n      {tradeHistory.length > 0 && (\n        <div className=\"mt-4\">\n          <h3 className=\"font-bold mb-2 text-white\">Recent Trades</h3>\n          <div className=\"max-h-60 overflow-y-auto space-y-2\">\n            {tradeHistory.map((trade) => (\n              <div key={trade.id || trade.timestamp} className=\"bg-gray-900 p-2 rounded-md text-xs\">\n                <div className=\"flex justify-between items-center mb-1\">\n                  <span className=\"font-medium text-gray-300\">{trade.pair} - {trade.action.toUpperCase()}</span>\n                  <span className=\"text-gray-400\">{new Date(trade.timestamp).toLocaleTimeString()}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                   {/* Format price for display */}\n                  <span className=\"text-gray-300\">{trade.amount} @ ${Number(trade.price).toFixed(4)}</span>\n                  <span className={`font-semibold ${trade.success ? 'text-green-500' : 'text-red-500'}`}>\n                    {trade.success ? 'Success' : 'Failed'}\n                  </span>\n                </div>\n                {trade.signature && !trade.signature.startsWith('sim') && (\n                  <div className=\"mt-1\">\n                    <a\n                      href={`https://solscan.io/tx/${trade.signature}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"text-blue-400 hover:underline text-xs\"\n                    >\n                      View Tx\n                    </a>\n                  </div>\n                )}\n                 {trade.error && (\n                   <div className=\"mt-1 text-red-400 text-xs\">Error: {trade.error}</div>\n                 )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BotControl;\n"],"names":[],"mappings":"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","debugId":null}}]
}