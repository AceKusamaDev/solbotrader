{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotrader/src/store/useBotStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { Position } from '@/lib/safetyFeatures'; // Assuming Position is defined here\r\n\r\n// Define types for state\r\ntype BotStatus = 'stopped' | 'running' | 'analyzing' | 'error';\r\ntype MarketCondition = 'Uptrend' | 'Ranging' | 'Unclear';\r\ntype StrategyType = 'TrendTracker' | 'SmartRange Scout';\r\n\r\n// Export the Trade interface\r\nexport interface Trade {\r\n  id: string;\r\n  timestamp: string;\r\n  pair: string;\r\n  action: 'buy' | 'sell';\r\n  amount: number;\r\n  price: number; // Ensure price is number\r\n  strategy: string;\r\n  success: boolean;\r\n  signature?: string;\r\n  error?: string;\r\n  pnl?: number; // Optional PnL for closed trades\r\n}\r\n\r\ninterface BotSettings {\r\n  strategyType: StrategyType;\r\n  amount: number;\r\n  pair: string; // e.g., \"SOL/USDC\"\r\n  stopLossPercentage: number; // User-defined SL\r\n  takeProfitPercentage: number; // User-defined TP\r\n  maxRuns: number; // Max number of trade cycles (entry + exit)\r\n  runIntervalMinutes: number; // Interval between runs\r\n  compoundCapital: boolean; // Reinvest profits\r\n  isTestMode: boolean;\r\n  action: 'buy' | 'sell'; // Add the action field\r\n}\r\n\r\ninterface BotState {\r\n  status: BotStatus;\r\n  settings: BotSettings;\r\n  marketCondition: MarketCondition;\r\n  activePositions: Position[];\r\n  tradeHistory: Trade[];\r\n  currentRun: number;\r\n  lastAnalysisTime: number | null;\r\n  errorMessage: string | null;\r\n\r\n  // Actions\r\n  setSettings: (newSettings: Partial<BotSettings>) => void;\r\n  startBot: () => void;\r\n  stopBot: () => void;\r\n  setAnalyzing: () => void;\r\n  setRunning: () => void;\r\n  setError: (message: string) => void;\r\n  setMarketCondition: (condition: MarketCondition) => void;\r\n  addPosition: (position: Position) => void;\r\n  removePosition: (positionId: string) => void;\r\n  updatePositionPrice: (positionId: string, currentPrice: number) => void; // For PnL calculation\r\n  addTradeHistory: (trade: Trade) => void;\r\n  incrementRun: () => void;\r\n  resetRuns: () => void;\r\n  setLastAnalysisTime: (time: number) => void;\r\n  toggleTestMode: () => void;\r\n}\r\n\r\n// Define the store\r\nconst useBotStore = create<BotState>((set, get) => ({\r\n  status: 'stopped',\r\n  settings: {\r\n    strategyType: 'TrendTracker',\r\n    amount: 0.1, // Default amount\r\n    pair: 'SOL/USDC',\r\n    stopLossPercentage: 2.5, // Default SL\r\n    takeProfitPercentage: 5, // Default TP\r\n    maxRuns: 1, // Default runs\r\n    runIntervalMinutes: 5, // Default interval\r\n    compoundCapital: false, // Default compounding\r\n    isTestMode: true, // Default to test mode\r\n    action: 'buy', // Default action\r\n  },\r\n  marketCondition: 'Unclear',\r\n  activePositions: [],\r\n  tradeHistory: [],\r\n  currentRun: 0,\r\n  lastAnalysisTime: null,\r\n  errorMessage: null,\r\n\r\n  // --- Actions ---\r\n  setSettings: (newSettings) =>\r\n    set((state) => ({\r\n      settings: { ...state.settings, ...newSettings },\r\n    })),\r\n\r\n  startBot: () => set({ status: 'analyzing', currentRun: 0, errorMessage: null }), // Start in analyzing state\r\n\r\n  stopBot: () => set({ status: 'stopped', errorMessage: null }),\r\n\r\n  setAnalyzing: () => set({ status: 'analyzing' }),\r\n\r\n  setRunning: () => set({ status: 'running' }),\r\n\r\n  setError: (message) => set({ status: 'error', errorMessage: message }),\r\n\r\n  setMarketCondition: (condition) => set({ marketCondition: condition }),\r\n\r\n  addPosition: (position) =>\r\n    set((state) => ({\r\n      activePositions: [...state.activePositions, position],\r\n    })),\r\n\r\n  removePosition: (positionId) =>\r\n    set((state) => ({\r\n      activePositions: state.activePositions.filter((p) => p.id !== positionId),\r\n    })),\r\n\r\n  // Basic update for PnL - might need refinement based on Position structure\r\n  updatePositionPrice: (positionId, currentPrice) =>\r\n    set((state) => ({\r\n      activePositions: state.activePositions.map((p) =>\r\n        p.id === positionId ? { ...p, /* currentPrice: currentPrice */ } : p // Placeholder for actual update logic if needed\r\n      ),\r\n    })),\r\n\r\n  addTradeHistory: (trade) =>\r\n    set((state) => ({\r\n      // Keep only the latest, e.g., 50 trades\r\n      tradeHistory: [trade, ...state.tradeHistory].slice(0, 50),\r\n    })),\r\n\r\n  incrementRun: () => set((state) => ({ currentRun: state.currentRun + 1 })),\r\n\r\n  resetRuns: () => set({ currentRun: 0 }),\r\n\r\n  setLastAnalysisTime: (time) => set({ lastAnalysisTime: time }),\r\n\r\n  toggleTestMode: () =>\r\n    set((state) => {\r\n      if (state.status !== 'stopped') {\r\n        console.warn('Cannot change test mode while bot is running.');\r\n        return {}; // Prevent changing mode while running\r\n      }\r\n      return { settings: { ...state.settings, isTestMode: !state.settings.isTestMode } };\r\n    }),\r\n}));\r\n\r\nexport default useBotStore;\r\n"],"names":[],"mappings":";;;AAAA;;AAgEA,mBAAmB;AACnB,MAAM,cAAc,CAAA,GAAA,2IAAA,CAAA,SAAM,AAAD,EAAY,CAAC,KAAK,MAAQ,CAAC;QAClD,QAAQ;QACR,UAAU;YACR,cAAc;YACd,QAAQ;YACR,MAAM;YACN,oBAAoB;YACpB,sBAAsB;YACtB,SAAS;YACT,oBAAoB;YACpB,iBAAiB;YACjB,YAAY;YACZ,QAAQ;QACV;QACA,iBAAiB;QACjB,iBAAiB,EAAE;QACnB,cAAc,EAAE;QAChB,YAAY;QACZ,kBAAkB;QAClB,cAAc;QAEd,kBAAkB;QAClB,aAAa,CAAC,cACZ,IAAI,CAAC,QAAU,CAAC;oBACd,UAAU;wBAAE,GAAG,MAAM,QAAQ;wBAAE,GAAG,WAAW;oBAAC;gBAChD,CAAC;QAEH,UAAU,IAAM,IAAI;gBAAE,QAAQ;gBAAa,YAAY;gBAAG,cAAc;YAAK;QAE7E,SAAS,IAAM,IAAI;gBAAE,QAAQ;gBAAW,cAAc;YAAK;QAE3D,cAAc,IAAM,IAAI;gBAAE,QAAQ;YAAY;QAE9C,YAAY,IAAM,IAAI;gBAAE,QAAQ;YAAU;QAE1C,UAAU,CAAC,UAAY,IAAI;gBAAE,QAAQ;gBAAS,cAAc;YAAQ;QAEpE,oBAAoB,CAAC,YAAc,IAAI;gBAAE,iBAAiB;YAAU;QAEpE,aAAa,CAAC,WACZ,IAAI,CAAC,QAAU,CAAC;oBACd,iBAAiB;2BAAI,MAAM,eAAe;wBAAE;qBAAS;gBACvD,CAAC;QAEH,gBAAgB,CAAC,aACf,IAAI,CAAC,QAAU,CAAC;oBACd,iBAAiB,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;gBAChE,CAAC;QAEH,2EAA2E;QAC3E,qBAAqB,CAAC,YAAY,eAChC,IAAI,CAAC,QAAU,CAAC;oBACd,iBAAiB,MAAM,eAAe,CAAC,GAAG,CAAC,CAAC,IAC1C,EAAE,EAAE,KAAK,aAAa;4BAAE,GAAG,CAAC;wBAAmC,IAAI,EAAE,gDAAgD;;gBAEzH,CAAC;QAEH,iBAAiB,CAAC,QAChB,IAAI,CAAC,QAAU,CAAC;oBACd,wCAAwC;oBACxC,cAAc;wBAAC;2BAAU,MAAM,YAAY;qBAAC,CAAC,KAAK,CAAC,GAAG;gBACxD,CAAC;QAEH,cAAc,IAAM,IAAI,CAAC,QAAU,CAAC;oBAAE,YAAY,MAAM,UAAU,GAAG;gBAAE,CAAC;QAExE,WAAW,IAAM,IAAI;gBAAE,YAAY;YAAE;QAErC,qBAAqB,CAAC,OAAS,IAAI;gBAAE,kBAAkB;YAAK;QAE5D,gBAAgB,IACd,IAAI,CAAC;gBACH,IAAI,MAAM,MAAM,KAAK,WAAW;oBAC9B,QAAQ,IAAI,CAAC;oBACb,OAAO,CAAC,GAAG,sCAAsC;gBACnD;gBACA,OAAO;oBAAE,UAAU;wBAAE,GAAG,MAAM,QAAQ;wBAAE,YAAY,CAAC,MAAM,QAAQ,CAAC,UAAU;oBAAC;gBAAE;YACnF;IACJ,CAAC;uCAEc","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotrader/src/components/StrategyConfig.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport useBotStore from '@/store/useBotStore'; // Import the Zustand store\n\n// Remove unused types\n// type IndicatorType = 'Moving Average' | 'RSI' | 'MACD' | 'Bollinger Bands';\n// type StrategyType = 'Mean Reversion' | 'Breakout Momentum' | 'Range Scalping' | 'Multi-indicator';\n// type ActionType = 'Buy' | 'Sell';\n\n// interface Indicator {\n//   type: IndicatorType;\n//   parameters: Record<string, number>;\n// }\n\n// Update props interface - no props needed now\ninterface StrategyConfigProps {}\n\nexport default function StrategyConfig({}: StrategyConfigProps) { // Remove onStrategyUpdate\n  // --- Get state and actions from Zustand store ---\n  const { settings, setSettings } = useBotStore((state) => ({\n    settings: state.settings,\n    setSettings: state.setSettings,\n  }));\n  // Destructure for easier access in the component\n  const { strategyType, amount, pair, action } = settings;\n\n  // --- Handlers to update Zustand store ---\n  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value)) {\n      setSettings({ amount: value });\n    }\n  };\n\n  const handleStrategyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // Type assertion needed here based on the store's StrategyType\n    setSettings({ strategyType: e.target.value as typeof strategyType });\n  };\n\n  const handleActionChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    // Type assertion needed here based on the store's action type\n    setSettings({ action: e.target.value as 'buy' | 'sell' });\n  };\n\n  const handlePairChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSettings({ pair: e.target.value });\n  };\n\n  return (\n    <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg\">\n      <h2 className=\"text-xl font-bold mb-4 text-white\">Strategy Configuration</h2>\n      \n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-300 mb-1\">Amount</label>\n        <input\n          type=\"number\"\n          value={amount}\n          onChange={handleAmountChange} // Use new handler\n          className=\"w-full bg-gray-700 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          step=\"0.01\" // Allow smaller steps\n          min=\"0.01\" // Allow smaller amounts\n        />\n      </div>\n      \n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-300 mb-1\">Strategy Type</label>\n        {/* Replace select with radio buttons */}\n        <div className=\"flex space-x-4 mt-2\">\n          <label className=\"flex items-center space-x-2 text-gray-300 cursor-pointer\">\n            <input\n              type=\"radio\"\n              name=\"strategyType\"\n              value=\"TrendTracker\"\n              checked={strategyType === 'TrendTracker'}\n              onChange={handleStrategyChange}\n              className=\"form-radio h-4 w-4 text-blue-600 bg-gray-700 border-gray-600 focus:ring-blue-500\"\n            />\n            <span>TrendTracker</span>\n          </label>\n          <label className=\"flex items-center space-x-2 text-gray-300 cursor-pointer\">\n            <input\n              type=\"radio\"\n              name=\"strategyType\"\n              value=\"SmartRange Scout\"\n              checked={strategyType === 'SmartRange Scout'}\n              onChange={handleStrategyChange}\n              className=\"form-radio h-4 w-4 text-blue-600 bg-gray-700 border-gray-600 focus:ring-blue-500\"\n            />\n            <span>SmartRange Scout</span>\n          </label>\n        </div>\n      </div>\n\n      {/* Indicator configuration section removed */}\n\n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-300 mb-1\">Action</label>\n        <select\n          value={action}\n          onChange={handleActionChange} // Use new handler\n          className=\"w-full bg-gray-700 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"buy\">Buy</option> {/* Use lowercase */}\n          <option value=\"sell\">Sell</option> {/* Use lowercase */}\n        </select>\n      </div>\n      \n      <div className=\"mb-6\">\n        <label className=\"block text-sm font-medium text-gray-300 mb-1\">Pair</label>\n        <select\n          value={pair}\n          onChange={handlePairChange} // Use new handler\n          className=\"w-full bg-gray-700 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"SOL/USDC\">SOL/USDC</option>\n          <option value=\"SOL/USDT\">SOL/USDT</option>\n          {/* Add more pairs as needed */}\n          {/* <option value=\"SOL/BTC\">SOL/BTC</option> */}\n        </select>\n      </div>\n\n      {/* Apply Settings button removed */}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA,8NAA+C,2BAA2B;;;AAH1E;;AAkBe,SAAS,eAAe,EAAuB;;IAC5D,mDAAmD;IACnD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,8HAAA,CAAA,UAAW,AAAD;sCAAE,CAAC,QAAU,CAAC;gBACxD,UAAU,MAAM,QAAQ;gBACxB,aAAa,MAAM,WAAW;YAChC,CAAC;;IACD,iDAAiD;IACjD,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG;IAE/C,2CAA2C;IAC3C,MAAM,qBAAqB,CAAC;QAC1B,MAAM,QAAQ,WAAW,EAAE,MAAM,CAAC,KAAK;QACvC,IAAI,CAAC,MAAM,QAAQ;YACjB,YAAY;gBAAE,QAAQ;YAAM;QAC9B;IACF;IAEA,MAAM,uBAAuB,CAAC;QAC5B,+DAA+D;QAC/D,YAAY;YAAE,cAAc,EAAE,MAAM,CAAC,KAAK;QAAwB;IACpE;IAEA,MAAM,qBAAqB,CAAC;QAC1B,8DAA8D;QAC9D,YAAY;YAAE,QAAQ,EAAE,MAAM,CAAC,KAAK;QAAmB;IACzD;IAEA,MAAM,mBAAmB,CAAC;QACxB,YAAY;YAAE,MAAM,EAAE,MAAM,CAAC,KAAK;QAAC;IACrC;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAAoC;;;;;;0BAElD,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAM,WAAU;kCAA+C;;;;;;kCAChE,6LAAC;wBACC,MAAK;wBACL,OAAO;wBACP,UAAU;wBACV,WAAU;wBACV,MAAK,OAAO,sBAAsB;;wBAClC,KAAI,OAAO,wBAAwB;;;;;;;;;;;;0BAIvC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAM,WAAU;kCAA+C;;;;;;kCAEhE,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAM,WAAU;;kDACf,6LAAC;wCACC,MAAK;wCACL,MAAK;wCACL,OAAM;wCACN,SAAS,iBAAiB;wCAC1B,UAAU;wCACV,WAAU;;;;;;kDAEZ,6LAAC;kDAAK;;;;;;;;;;;;0CAER,6LAAC;gCAAM,WAAU;;kDACf,6LAAC;wCACC,MAAK;wCACL,MAAK;wCACL,OAAM;wCACN,SAAS,iBAAiB;wCAC1B,UAAU;wCACV,WAAU;;;;;;kDAEZ,6LAAC;kDAAK;;;;;;;;;;;;;;;;;;;;;;;;0BAOZ,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAM,WAAU;kCAA+C;;;;;;kCAChE,6LAAC;wBACC,OAAO;wBACP,UAAU;wBACV,WAAU;;0CAEV,6LAAC;gCAAO,OAAM;0CAAM;;;;;;4BAAY;0CAChC,6LAAC;gCAAO,OAAM;0CAAO;;;;;;4BAAa;;;;;;;;;;;;;0BAItC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAM,WAAU;kCAA+C;;;;;;kCAChE,6LAAC;wBACC,OAAO;wBACP,UAAU;wBACV,WAAU;;0CAEV,6LAAC;gCAAO,OAAM;0CAAW;;;;;;0CACzB,6LAAC;gCAAO,OAAM;0CAAW;;;;;;;;;;;;;;;;;;;;;;;;AASnC;GA3GwB;;QAEY,8HAAA,CAAA,UAAW;;;KAFvB","debugId":null}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotrader/src/components/PerformanceDashboard.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n// Remove unused Jupiter hook import if wallet info isn't needed directly here\n// import useJupiterTrading from '@/lib/jupiter';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react'; // Import useConnection and useWallet\n// Import Zustand store and types\nimport useBotStore, { Trade } from '@/store/useBotStore';\nimport { Position } from '@/lib/safetyFeatures'; // Import Position type\n\n// Remove local Trade/Position interfaces if using store types\n/* interface Trade {\n  id: string;\n  pair: string;\n  side: string;\n  amount: number;\n  price: number;\n  timestamp: string;\n  status: string;\n  pnl: number;\n  signature?: string;\n}\n\ninterface Position {\n  id: string;\n  pair: string;\n  side: string;\n  amount: number;\n  entryPrice: number;\n  currentPrice: number;\n  pnl: number;\n  timestamp: string;\n} */\n\ninterface PnLDataPoint {\n  time: string;\n  pnl: number;\n}\n\n// Remove props interface\n// interface PerformanceDashboardProps { ... }\n\n// Remove props from function signature\nexport default function PerformanceDashboard() {\n  // Get state from Zustand store\n  const {\n    activePositions, // Use directly from store\n    tradeHistory,    // Use directly from store\n    settings,        // Get settings for display in Account tab\n    status: botStatus, // Get bot status from store\n  } = useBotStore((state) => ({\n    activePositions: state.activePositions,\n    tradeHistory: state.tradeHistory,\n    settings: state.settings,\n    status: state.status,\n  }));\n\n  // Get wallet info and connection directly using hooks\n  const { publicKey: walletPublicKey, connected: isWalletConnected } = useWallet();\n  const { connection } = useConnection(); // Get the configured connection object\n\n  // Local state for UI and derived data\n  const [activeTab, setActiveTab] = useState<'livePnL' | 'openPositions' | 'recentTrades' | 'account'>('livePnL');\n  const [pnlData, setPnlData] = useState<PnLDataPoint[]>([]); // Keep for chart formatting\n  const [totalPnl, setTotalPnl] = useState<number>(0); // Keep for display calculation\n  const [walletBalance, setWalletBalance] = useState<number | null>(null); // Keep for Account tab display\n  const [error, setError] = useState<string | null>(null); // Keep for local fetch errors (e.g., balance fetch)\n  // Remove local state for trades and positions\n  // const [trades, setTrades] = useState<Trade[]>([]);\n  // const [positions, setPositions] = useState<Position[]>([]);\n  // Remove local botStatus state\n  // const [botStatus, setBotStatus] = useState<'ready' | 'running' | 'stopped'>('ready');\n\n\n  // Initialize with empty PnL data\n  useEffect(() => {\n    const hours = Array.from({ length: 8 }, (_, i) => {\n      const hour = 9 + i;\n      return hour < 10 ? `0${hour}:00` : `${hour}:00`;\n    });\n    \n    const initialPnlData = hours.map((time, index) => ({\n      time,\n      pnl: 0\n    }));\n    \n    setPnlData(initialPnlData);\n  }, []);\n  \n  // Update derived state (like PnL) based on store changes\n  useEffect(() => {\n    // Calculate total PnL based on store's tradeHistory\n    // TODO: Implement a more accurate PnL calculation based on entry/exit prices\n    let calculatedPnl = 0;\n    tradeHistory.forEach(trade => {\n      if (trade.success) {\n        // Simple PnL calculation for demonstration (needs refinement)\n        // This assumes SOL is the base currency and PnL is measured in SOL\n        // A proper calculation needs entry/exit prices and amounts.\n        // calculatedPnl += trade.action === 'buy' ? -trade.amount : trade.amount; // Placeholder logic\n      }\n    });\n    setTotalPnl(calculatedPnl); // Update local PnL state\n\n    // Update PnL data for chart (example - needs real data)\n    if (tradeHistory.length > 0) {\n      const newPnlData = [...pnlData]; // Use existing pnlData structure\n      const lastIndex = Math.min(tradeHistory.length, newPnlData.length) - 1;\n      if (lastIndex >= 0) {\n         newPnlData[lastIndex].pnl = calculatedPnl; // Update last point\n         setPnlData(newPnlData);\n      }\n    }\n    // No need to set local trades/positions state anymore\n    /*\n    if (tradeHistory && tradeHistory.length > 0) { ... setTrades ... }\n    if (activePositions && activePositions.length > 0) { ... setPositions ... }\n    */\n  }, [tradeHistory, pnlData]); // Depend on store's tradeHistory and local pnlData structure\n\n  // Fetch wallet balance using the connection from the wallet adapter context\n  useEffect(() => {\n    const fetchWalletBalance = async () => {\n      // Use connection object from useConnection hook\n      if (isWalletConnected && walletPublicKey && connection) {\n        try {\n          // Use connection.getBalance method\n          const balanceLamports = await connection.getBalance(walletPublicKey);\n          setWalletBalance(balanceLamports / 1000000000); // Convert lamports to SOL\n        } catch (error) {\n          console.error('Error fetching wallet balance:', error);\n          setError('Failed to fetch wallet balance');\n        }\n      }\n    };\n    \n    fetchWalletBalance();\n    \n    // Fetch balance every 30 seconds\n    const intervalId = setInterval(fetchWalletBalance, 30000);\n    \n    return () => clearInterval(intervalId);\n  }, [isWalletConnected, walletPublicKey, connection]); // Add connection to dependency array\n\n  // Remove the redundant CoinGecko price fetching useEffect\n  /*\n  useEffect(() => {\n    // ... removed fetchSolPrice logic ...\n  }, []);\n  */\n\n  // Use settings from store for display where applicable\n  // const { allocatedCapital, maxDrawdown, profitTarget, slippage } = settings; // Remove these if not in store yet\n  const displayAllocatedCapital = walletBalance !== null ? walletBalance : 0; // Default to 0 if balance not fetched\n\n  return (\n    <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg\">\n      {error && (\n        <div className=\"bg-red-900/50 p-4 rounded-md mb-4\">\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full mr-2\"></div>\n            <span className=\"text-red-300\">{error}</span>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"flex mb-4 border-b border-gray-700\">\n        <button\n          className={`px-4 py-2 font-medium ${activeTab === 'livePnL' ? 'text-blue-500 border-b-2 border-blue-500' : 'text-gray-400 hover:text-gray-300'}`}\n          onClick={() => setActiveTab('livePnL')}\n        >\n          Live PnL\n        </button>\n        <button\n          className={`px-4 py-2 font-medium ${activeTab === 'openPositions' ? 'text-blue-500 border-b-2 border-blue-500' : 'text-gray-400 hover:text-gray-300'}`}\n          onClick={() => setActiveTab('openPositions')}\n        >\n          Open Positions\n        </button>\n        <button\n          className={`px-4 py-2 font-medium ${activeTab === 'recentTrades' ? 'text-blue-500 border-b-2 border-blue-500' : 'text-gray-400 hover:text-gray-300'}`}\n          onClick={() => setActiveTab('recentTrades')}\n        >\n          Recent Trades\n        </button>\n        <button\n          className={`px-4 py-2 font-medium ${activeTab === 'account' ? 'text-blue-500 border-b-2 border-blue-500' : 'text-gray-400 hover:text-gray-300'}`}\n          onClick={() => setActiveTab('account')}\n        >\n          Account\n        </button>\n      </div>\n\n      <div className=\"mt-4\">\n        {activeTab === 'livePnL' && (\n          <div>\n            <div className=\"mb-4 flex items-center\">\n              <h3 className=\"text-xl font-bold text-white\">Live PnL</h3>\n              <span className={`ml-4 text-2xl font-bold ${totalPnl >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                {totalPnl >= 0 ? '+' : ''}{totalPnl.toFixed(2)} SOL\n              </span>\n            </div>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={pnlData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                  <XAxis dataKey=\"time\" stroke=\"#9CA3AF\" />\n                  <YAxis stroke=\"#9CA3AF\" />\n                  <Tooltip \n                    contentStyle={{ backgroundColor: '#1F2937', borderColor: '#374151' }}\n                    labelStyle={{ color: '#F9FAFB' }}\n                  />\n                  <Legend />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"pnl\" \n                    stroke=\"#10B981\" \n                    activeDot={{ r: 8 }} \n                    name=\"PnL (SOL)\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'openPositions' && (\n          <div>\n            <h3 className=\"text-xl font-bold text-white mb-4\">Open Positions</h3>\n            {/* Use activePositions from store */}\n            {activePositions.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-700\">\n                  <thead className=\"bg-gray-700\">\n                    <tr>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Pair</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Side</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Amount</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Entry Price</th>\n                      {/* PnL calculation needs current price - display placeholder or calculate if price available */}\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Unrealized PnL</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-gray-800 divide-y divide-gray-700\">\n                    {/* Map over storeActivePositions */}\n                    {activePositions.map((position) => {\n                       // TODO: Calculate PnL based on current price fetched elsewhere\n                       const currentPrice = position.entryPrice; // Placeholder\n                       const priceDiff = position.action === 'buy'\n                         ? currentPrice - position.entryPrice\n                         : position.entryPrice - currentPrice;\n                       const pnl = priceDiff * position.amount; // Simple PnL\n\n                       return (\n                         <tr key={position.id}>\n                           <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">{position.pair}</td>\n                           <td className={`px-6 py-4 whitespace-nowrap text-sm ${position.action === 'buy' ? 'text-green-500' : 'text-red-500'}`}>\n                             {position.action.toUpperCase()}\n                           </td>\n                           <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">{position.amount}</td>\n                           <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">${position.entryPrice.toFixed(4)}</td>\n                           <td className={`px-6 py-4 whitespace-nowrap text-sm font-medium ${pnl >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                             {/* Display calculated PnL */}\n                             {pnl >= 0 ? '+' : ''}{pnl.toFixed(4)} SOL {/* Assuming PnL in SOL */}\n                           </td>\n                         </tr>\n                       );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-400\">No open positions</div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'recentTrades' && (\n          <div>\n            <h3 className=\"text-xl font-bold text-white mb-4\">Recent Trades</h3>\n            {/* Use tradeHistory from store */}\n            {tradeHistory.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-700\">\n                  <thead className=\"bg-gray-700\">\n                    <tr>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Time</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Pair</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Side</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Amount</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Price</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Status</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Transaction</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-gray-800 divide-y divide-gray-700\">\n                     {/* Map over storeTradeHistory */}\n                    {tradeHistory.map((trade) => (\n                      <tr key={trade.id}>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">\n                          {new Date(trade.timestamp).toLocaleTimeString()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">{trade.pair}</td>\n                        <td className={`px-6 py-4 whitespace-nowrap text-sm ${trade.action === 'buy' ? 'text-green-500' : 'text-red-500'}`}>\n                          {trade.action.toUpperCase()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">{trade.amount}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">${Number(trade.price).toFixed(4)}</td>\n                        <td className={`px-6 py-4 whitespace-nowrap text-sm ${trade.success ? 'text-green-500' : 'text-red-500'}`}>\n                          {trade.success ? 'Completed' : 'Failed'} {/* Use Completed/Failed */}\n                        </td>\n                         {/* Add Transaction Link Column */}\n                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">\n                           {trade.signature && !trade.signature.startsWith('sim') ? (\n                             <a\n                               href={`https://solscan.io/tx/${trade.signature}`}\n                               target=\"_blank\"\n                               rel=\"noopener noreferrer\"\n                               className=\"text-blue-400 hover:underline\"\n                             >\n                               View\n                             </a>\n                           ) : (\n                             <span className=\"text-gray-500\">N/A</span>\n                           )}\n                         </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-400\">No recent trades</div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'account' && (\n          <div>\n            <h3 className=\"text-xl font-bold text-white mb-4\">Account</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"bg-gray-700 p-4 rounded-lg\">\n                <div className=\"text-sm text-gray-400\">Wallet Balance</div>\n                <div className=\"text-xl font-bold text-white\">\n                    {walletBalance !== null ? `${walletBalance.toFixed(4)} SOL` : 'Loading...'}\n                </div>\n              </div>\n               {/* Display settings from store */}\n               <div className=\"bg-gray-700 p-4 rounded-lg\">\n                 <div className=\"text-sm text-gray-400\">Stop Loss Setting</div>\n                 <div className=\"text-xl font-bold text-white\">{settings.stopLossPercentage}%</div>\n               </div>\n               <div className=\"bg-gray-700 p-4 rounded-lg\">\n                 <div className=\"text-sm text-gray-400\">Take Profit Setting</div>\n                 <div className=\"text-xl font-bold text-white\">{settings.takeProfitPercentage}%</div>\n               </div>\n               <div className=\"bg-gray-700 p-4 rounded-lg\">\n                 <div className=\"text-sm text-gray-400\">Trading Pair</div>\n                 <div className=\"text-xl font-bold text-white\">{settings.pair}</div>\n               </div>\n              {walletPublicKey && (\n                <div className=\"bg-gray-700 p-4 rounded-lg col-span-2\">\n                  <div className=\"text-sm text-gray-400\">Connected Wallet</div>\n                  <div className=\"text-md font-mono text-white truncate\">\n                    {walletPublicKey?.toBase58() ?? 'Not Connected'} {/* Display wallet key */}\n                  </div>\n                  {walletPublicKey && ( // Only show link if connected\n                    <a\n                      href={`https://solscan.io/account/${walletPublicKey.toBase58()}`}\n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"text-blue-400 hover:underline text-sm mt-1 inline-block\"\n                  >\n                    View on Solscan\n                  </a>\n                  )} {/* Add missing closing parenthesis */}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Remove redundant bot status/controls section */}\n      {/*\n      <div className=\"mt-6 pt-6 border-t border-gray-700\"> ... </div>\n      */}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1324, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotrader/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react'; // Removed useEffect\nimport { useWallet } from '@solana/wallet-adapter-react'; // Import useWallet\nimport dynamic from 'next/dynamic';\nimport StrategyConfig from '@/components/StrategyConfig';\nimport TradingChart from '@/components/TradingChart';\nimport PerformanceDashboard from '@/components/PerformanceDashboard';\n// Remove unused StrategyParams import\n// import { StrategyParams } from '@/components/BotControl';\n\n// Dynamically import BotControl with no SSR to prevent wallet-related issues\nconst BotControl = dynamic(() => import('@/components/BotControl'), { ssr: false });\n\nexport default function Home() {\n  // Get connection status from useWallet\n  const { connected } = useWallet();\n  const [currentSymbol] = useState('SOLUSD');\n  // Remove local state for strategyParams - managed by Zustand store now\n  // const [strategyParams, setStrategyParams] = useState<StrategyParams>(...);\n\n  // Removed useEffect for manual connection checking\n  // Removed manualConnect function\n\n  // Remove handler function - StrategyConfig updates store directly\n  // const handleStrategyUpdate = (newParams: StrategyParams) => { ... };\n\n  return (\n    <div className=\"flex flex-col space-y-8\">\n      {/* Use connected status from useWallet for the top banner */}\n      {!connected && ( \n        <div className=\"fixed top-0 left-0 right-0 z-50 p-4 bg-blue-600\">\n          <div className=\"container mx-auto flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-white mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <span className=\"text-white font-medium\">\n                Connect your wallet to start trading\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"pt-16\">\n        <h1 className=\"text-3xl font-bold\">SolBotX AI Trading Bot</h1>\n\n        {/* Use connected status from useWallet for conditional rendering */}\n        {!connected ? ( \n          <div className=\"bg-gray-800 p-8 rounded-lg text-center mt-8\">\n            <h2 className=\"text-2xl font-bold mb-4\">Connect Your Wallet</h2>\n            <p className=\"text-gray-400 mb-6\">\n              Please connect your Phantom wallet to start using the SolBotX trading bot.\n            </p>\n            <p className=\"text-gray-400 mb-6\">\n              Click the Connect Wallet button in the top right corner (provided by the Header component).\n            </p>\n            {/* Removed manual connect button */}\n          </div>\n        ) : (\n          <>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mt-8\">\n              <div className=\"lg:col-span-1\">\n                {/* Remove onStrategyUpdate prop */}\n                <StrategyConfig />\n                <div className=\"mt-6\">\n                  {/* Remove strategyParams prop - BotControl will use Zustand store */}\n                  <BotControl />\n                </div>\n              </div>\n              <div className=\"lg:col-span-2\">\n                {/* Temporarily comment out TradingChart due to CoinGecko API issues */}\n                {/* <TradingChart symbol={currentSymbol} /> */}\n                <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg h-96 flex items-center justify-center text-gray-500\">\n                  Trading Chart Placeholder\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-8\">\n              {/* Remove props as PerformanceDashboard now uses Zustand store */}\n              <PerformanceDashboard />\n            </div>\n          </>\n        )}\n      </div>\n      {/* CoinGecko Attribution Footer */}\n      <footer className=\"text-center text-xs text-gray-500 mt-8 py-4 border-t border-gray-700\">\n        Price data provided by <a href=\"https://www.coingecko.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline hover:text-gray-400\">CoinGecko</a>\n      </footer>\n    </div>\n  );\n}\n\n// Removed conflicting global declarations as wallet adapter handles types\n"],"names":[],"mappings":";;;;AAEA,mRAAkC,oBAAoB;AACtD,0TAA0D,mBAAmB;AAC7E;AACA;AAEA;;;;AAPA;;;;;;AAQA,sCAAsC;AACtC,4DAA4D;AAE5D,6EAA6E;AAC7E,MAAM,aAAa,CAAA,GAAA,kKAAA,CAAA,UAAO,AAAD,EAAE;;;;;;IAA2C,KAAK;;KAArE;AAES,SAAS;;IACtB,uCAAuC;IACvC,MAAM,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,oLAAA,CAAA,YAAS,AAAD;IAC9B,MAAM,CAAC,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,uEAAuE;IACvE,6EAA6E;IAE7E,mDAAmD;IACnD,iCAAiC;IAEjC,kEAAkE;IAClE,uEAAuE;IAEvE,qBACE,6LAAC;QAAI,WAAU;;YAEZ,CAAC,2BACA,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,OAAM;gCAA6B,WAAU;gCAA0B,MAAK;gCAAO,SAAQ;gCAAY,QAAO;0CACjH,cAAA,6LAAC;oCAAK,eAAc;oCAAQ,gBAAe;oCAAQ,aAAa;oCAAG,GAAE;;;;;;;;;;;0CAEvE,6LAAC;gCAAK,WAAU;0CAAyB;;;;;;;;;;;;;;;;;;;;;;0BAQjD,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAqB;;;;;;oBAGlC,CAAC,0BACA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAA0B;;;;;;0CACxC,6LAAC;gCAAE,WAAU;0CAAqB;;;;;;0CAGlC,6LAAC;gCAAE,WAAU;0CAAqB;;;;;;;;;;;6CAMpC;;0CACE,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAI,WAAU;;0DAEb,6LAAC,uIAAA,CAAA,UAAc;;;;;0DACf,6LAAC;gDAAI,WAAU;0DAEb,cAAA,6LAAC;;;;;;;;;;;;;;;;kDAGL,6LAAC;wCAAI,WAAU;kDAGb,cAAA,6LAAC;4CAAI,WAAU;sDAA2F;;;;;;;;;;;;;;;;;0CAM9G,6LAAC;gCAAI,WAAU;0CAEb,cAAA,6LAAC,6IAAA,CAAA,UAAoB;;;;;;;;;;;;;;;;;;0BAM7B,6LAAC;gBAAO,WAAU;;oBAAuE;kCAChE,6LAAC;wBAAE,MAAK;wBAA6B,QAAO;wBAAS,KAAI;wBAAsB,WAAU;kCAAgC;;;;;;;;;;;;;;;;;;AAIxJ,EAEA,0EAA0E;GAjFlD;;QAEA,oLAAA,CAAA,YAAS;;;MAFT","debugId":null}}]
}