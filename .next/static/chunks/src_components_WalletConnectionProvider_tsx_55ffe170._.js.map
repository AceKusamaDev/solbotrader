{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotrader/src/components/WalletConnectionProvider.tsx"],"sourcesContent":["'use client';\n\nimport React, { useMemo } from 'react';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { PhantomWalletAdapter } from '@solana/wallet-adapter-wallets'; // Add other wallets if needed\nimport { clusterApiUrl } from '@solana/web3.js';\n\n// Default styles for the modal are now imported in layout.tsx\n// require('@solana/wallet-adapter-react-ui/styles.css');\n\nexport default function WalletConnectionProvider({ children }: { children: React.ReactNode }) {\n  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n  // Use the environment variable for network, default to mainnet-beta\n  const network = (process.env.NEXT_PUBLIC_SOLANA_NETWORK || 'mainnet-beta') as WalletAdapterNetwork; \n\n  // You can also provide a custom RPC endpoint\n  // Use the environment variable for RPC endpoint\n  const endpoint = useMemo(() => process.env.NEXT_PUBLIC_RPC_ENDPOINT || clusterApiUrl(network), [network]);\n\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n  // Only the wallets you configure here will be compiled into your application, and only the dependencies\n  // of wallets that your users connect to will be loaded.\n  const wallets = useMemo(\n    () => [\n      new PhantomWalletAdapter(),\n      // Add other wallet adapters here if desired (e.g., SolflareWalletAdapter)\n    ],\n    [network] // Network dependency might be relevant for some wallets\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          {children} \n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n"],"names":[],"mappings":";;;AAemB;;AAbnB;AACA;AAAA;AAEA;AACA,0TAAuE,8BAA8B;AACrG;;;AAPA;;;;;;AAYe,SAAS,yBAAyB,EAAE,QAAQ,EAAiC;;IAC1F,uDAAuD;IACvD,oEAAoE;IACpE,MAAM,UAAW,oDAA0C;IAE3D,6CAA6C;IAC7C,gDAAgD;IAChD,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;sDAAE,IAAM,oHAAwC,CAAA,GAAA,2KAAA,CAAA,gBAAa,AAAD,EAAE;qDAAU;QAAC;KAAQ;IAExG,yGAAyG;IACzG,wGAAwG;IACxG,wDAAwD;IACxD,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;qDACpB,IAAM;gBACJ,IAAI,oLAAA,CAAA,uBAAoB;aAEzB;oDACD;QAAC;KAAQ,CAAC,wDAAwD;;IAGpE,qBACE,6LAAC,6LAAA,CAAA,qBAAkB;QAAC,UAAU;kBAC5B,cAAA,6LAAC,yLAAA,CAAA,iBAAc;YAAC,SAAS;YAAS,WAAW;sBAC3C,cAAA,6LAAC,oMAAA,CAAA,sBAAmB;0BACjB;;;;;;;;;;;;;;;;AAKX;GA7BwB;KAAA","debugId":null}}]
}